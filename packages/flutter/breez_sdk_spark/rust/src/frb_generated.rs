// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::BreezSdkExt;
use crate::*;
use breez_sdk_common::breez_server::*;
use breez_sdk_common::error::*;
use breez_sdk_common::fiat::FiatAPI;
use breez_sdk_common::fiat::*;
use breez_sdk_common::input::*;
use breez_sdk_common::lnurl::pay::*;
use breez_sdk_common::rest::rest_client::RestClient;
use breez_sdk_common::rest::rest_client::*;
use breez_sdk_spark::chain::rest_client::*;
use breez_sdk_spark::chain::BitcoinChainService;
use breez_sdk_spark::chain::*;
use breez_sdk_spark::models::Logger;
use breez_sdk_spark::models::*;
use breez_sdk_spark::persist::sqlite::*;
use breez_sdk_spark::persist::Storage;
use breez_sdk_spark::persist::*;
use breez_sdk_spark::EventListener;
use breez_sdk_spark::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

use std::path::Path;
use std::pin::Pin;

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1420320862;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__breez_sdk_spark__chain__rest_client__BasicAuth_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    username: impl CstDecode<String>,
    password: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BasicAuth_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_username = username.cst_decode();
            let api_password = password.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::chain::rest_client::BasicAuth::new(
                            api_username,
                            api_password,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_claim_deposit_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::ClaimDepositRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_claim_deposit",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            breez_sdk_spark::BreezSdk::claim_deposit(&*api_that_guard, api_request)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_disconnect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_disconnect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, SdkError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = breez_sdk_spark::BreezSdk::disconnect(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_frb_override_add_event_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    listener: impl CstDecode<StreamSink<SdkEvent, flutter_rust_bridge::for_generated::DcoCodec>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_frb_override_add_event_listener(dart_style=add_event_listener)",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_listener = listener.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::BreezSdk::frb_override_add_event_listener(
                            &*api_that_guard,
                            api_listener,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_get_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::GetInfoRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_get_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            breez_sdk_spark::BreezSdk::get_info(&*api_that_guard, api_request)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_get_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::GetPaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_get_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            breez_sdk_spark::BreezSdk::get_payment(&*api_that_guard, api_request)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_list_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::ListPaymentsRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_list_payments",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            breez_sdk_spark::BreezSdk::list_payments(&*api_that_guard, api_request)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_list_unclaimed_deposits_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::ListUnclaimedDepositsRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_list_unclaimed_deposits",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = breez_sdk_spark::BreezSdk::list_unclaimed_deposits(
                            &*api_that_guard,
                            api_request,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_lnurl_pay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::LnurlPayRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_lnurl_pay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            breez_sdk_spark::BreezSdk::lnurl_pay(&*api_that_guard, api_request)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_prepare_lnurl_pay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::PrepareLnurlPayRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_prepare_lnurl_pay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = breez_sdk_spark::BreezSdk::prepare_lnurl_pay(
                            &*api_that_guard,
                            api_request,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_prepare_send_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::PrepareSendPaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_prepare_send_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = breez_sdk_spark::BreezSdk::prepare_send_payment(
                            &*api_that_guard,
                            api_request,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_receive_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<ReceivePaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_receive_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = breez_sdk_spark::BreezSdk::receive_payment(
                            &*api_that_guard,
                            api_request,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_refund_deposit_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<RefundDepositRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_refund_deposit",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = breez_sdk_spark::BreezSdk::refund_deposit(
                            &*api_that_guard,
                            api_request,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_remove_event_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    id: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_remove_event_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::BreezSdk::remove_event_listener(&*api_that_guard, &api_id),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_send_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<SendPaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_send_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            breez_sdk_spark::BreezSdk::send_payment(&*api_that_guard, api_request)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__BreezSdk_sync_wallet_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
    >,
    request: impl CstDecode<breez_sdk_spark::models::SyncWalletRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdk_sync_wallet",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_request = request.cst_decode();
            move |context| {
                transform_result_dco::<_, _, SdkError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        breez_sdk_spark::BreezSdk::sync_wallet(&*api_that_guard, api_request)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__breez_server__BreezServer_fetch_fiat_currencies_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezServer_fetch_fiat_currencies",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_common::breez_server::BreezServer::fetch_fiat_currencies(
                            &*api_that_guard,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__breez_server__BreezServer_fetch_fiat_rates_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezServer_fetch_fiat_rates",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_common::breez_server::BreezServer::fetch_fiat_rates(
                            &*api_that_guard,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__EventEmitter_add_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>,
    >,
    listener: impl CstDecode<Box<dyn EventListener>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "EventEmitter_add_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_listener = listener.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::EventEmitter::add_listener(&*api_that_guard, api_listener),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__EventEmitter_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "EventEmitter_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(breez_sdk_spark::EventEmitter::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__EventEmitter_emit_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>,
    >,
    event: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "EventEmitter_emit",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_event = event.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let mut api_event_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_event, 1, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            1 => api_event_guard = Some(api_event.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let api_event_guard = api_event_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok({
                        breez_sdk_spark::EventEmitter::emit(&*api_that_guard, &*api_event_guard);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__EventEmitter_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "EventEmitter_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(breez_sdk_spark::EventEmitter::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__EventEmitter_remove_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>,
    >,
    id: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "EventEmitter_remove_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::EventEmitter::remove_listener(&*api_that_guard, &api_id),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__models__Fee_to_sats_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>>>,
    vbytes: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Fee_to_sats",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_vbytes = vbytes.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(breez_sdk_spark::models::Fee::to_sats(
                        &*api_that_guard,
                        api_vbytes,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_get_amount_sats_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PrepareSendPaymentResponse_auto_accessor_get_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.amount_sats.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_get_payment_method_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PrepareSendPaymentResponse_auto_accessor_get_payment_method",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.payment_method.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_set_amount_sats_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
        >,
    >,
    amount_sats: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PrepareSendPaymentResponse_auto_accessor_set_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_amount_sats = amount_sats.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.amount_sats = api_amount_sats;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_set_payment_method_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
        >,
    >,
    payment_method: impl CstDecode<SendPaymentMethod>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "PrepareSendPaymentResponse_auto_accessor_set_payment_method",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_payment_method = payment_method.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.payment_method = api_payment_method;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__ReceivePaymentRequest_auto_accessor_get_payment_method_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ReceivePaymentRequest_auto_accessor_get_payment_method",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.payment_method.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__ReceivePaymentRequest_auto_accessor_set_payment_method_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
        >,
    >,
    payment_method: impl CstDecode<ReceivePaymentMethod>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ReceivePaymentRequest_auto_accessor_set_payment_method",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_payment_method = payment_method.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.payment_method = api_payment_method;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_destination_address_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_get_destination_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.destination_address.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_fee_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_get_fee",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.fee.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_txid_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_get_txid",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.txid.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_vout_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_get_vout",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.vout.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_destination_address_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
    destination_address: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_set_destination_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_destination_address = destination_address.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.destination_address = api_destination_address;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_fee_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
    fee: impl CstDecode<Fee>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_set_fee",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_fee = fee.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.fee = api_fee;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_txid_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
    txid: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_set_txid",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_txid = txid.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.txid = api_txid;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_vout_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >,
    >,
    vout: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RefundDepositRequest_auto_accessor_set_vout",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_vout = vout.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.vout = api_vout;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_get_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>,
    >,
    url: impl CstDecode<String>,
    headers: impl CstDecode<Option<std::collections::HashMap<String, String>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ReqwestRestClient_get",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_url = url.cst_decode();
            let api_headers = headers.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_common::rest::rest_client::ReqwestRestClient::get(
                            &*api_that_guard,
                            api_url,
                            api_headers,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ReqwestRestClient_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ServiceConnectivityError>((move || {
                    let output_ok = breez_sdk_common::rest::rest_client::ReqwestRestClient::new()?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_post_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>,
    >,
    url: impl CstDecode<String>,
    headers: impl CstDecode<Option<std::collections::HashMap<String, String>>>,
    body: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ReqwestRestClient_post",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_url = url.cst_decode();
            let api_headers = headers.cst_decode();
            let api_body = body.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_common::rest::rest_client::ReqwestRestClient::post(
                            &*api_that_guard,
                            api_url,
                            api_headers,
                            api_body,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__chain__rest_client__RestClientChainService_broadcast_transaction_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
        >,
    >,
    tx: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "RestClientChainService_broadcast_transaction", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_tx = tx.cst_decode(); move |context|  {
                    transform_result_dco::<_, _, ()>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(breez_sdk_spark::chain::rest_client::RestClientChainService::broadcast_transaction(&*api_that_guard, api_tx))?;   Ok(output_ok)
                    })())
                } })
}
fn wire__breez_sdk_spark__chain__rest_client__RestClientChainService_get_address_utxos_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
        >,
    >,
    address: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "RestClientChainService_get_address_utxos", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_address = address.cst_decode(); move |context|  {
                    transform_result_dco::<_, _, ()>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(breez_sdk_spark::chain::rest_client::RestClientChainService::get_address_utxos(&*api_that_guard, api_address))?;   Ok(output_ok)
                    })())
                } })
}
fn wire__breez_sdk_spark__chain__rest_client__RestClientChainService_get_transaction_hex_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
        >,
    >,
    txid: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "RestClientChainService_get_transaction_hex", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_txid = txid.cst_decode(); move |context|  {
                    transform_result_dco::<_, _, ()>((move ||  {
                        let mut api_that_guard = None;
let decode_indices_ = flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(&api_that, 0, false)]);
        for i in decode_indices_ {
            match i {
                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                _ => unreachable!(),
            }
        }
        let api_that_guard = api_that_guard.unwrap();
 let output_ok = Result::<_,()>::Ok(breez_sdk_spark::chain::rest_client::RestClientChainService::get_transaction_hex(&*api_that_guard, api_txid))?;   Ok(output_ok)
                    })())
                } })
}
fn wire__breez_sdk_spark__chain__rest_client__RestClientChainService_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    base_url: impl CstDecode<String>,
    network: impl CstDecode<breez_sdk_spark::models::Network>,
    max_retries: impl CstDecode<usize>,
    rest_client: impl CstDecode<Box<dyn RestClient>>,
    basic_auth: impl CstDecode<Option<BasicAuth>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "RestClientChainService_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_base_url = base_url.cst_decode();
            let api_network = network.cst_decode();
            let api_max_retries = max_retries.cst_decode();
            let api_rest_client = rest_client.cst_decode();
            let api_basic_auth = basic_auth.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::chain::rest_client::RestClientChainService::new(
                            api_base_url,
                            api_network,
                            api_max_retries,
                            api_rest_client,
                            api_basic_auth,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SdkBuilder_build_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<SdkBuilder>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SdkBuilder_build",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let output_ok = breez_sdk_spark::SdkBuilder::build(api_that).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__SdkBuilder_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    config: impl CstDecode<breez_sdk_spark::models::Config>,
    mnemonic: impl CstDecode<String>,
    storage: impl CstDecode<Arc<dyn Storage>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SdkBuilder_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_config = config.cst_decode();
            let api_mnemonic = mnemonic.cst_decode();
            let api_storage = storage.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(breez_sdk_spark::SdkBuilder::new(
                        api_config,
                        api_mnemonic,
                        api_storage,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_get_options_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SendPaymentRequest_auto_accessor_get_options",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.options.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_get_prepare_response_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SendPaymentRequest_auto_accessor_get_prepare_response",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(api_that_guard.prepare_response.clone())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_set_options_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>,
    >,
    options: impl CstDecode<Option<SendPaymentOptions>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SendPaymentRequest_auto_accessor_set_options",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_options = options.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.options = api_options;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_set_prepare_response_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>,
    >,
    prepare_response: impl CstDecode<PrepareSendPaymentResponse>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SendPaymentRequest_auto_accessor_set_prepare_response",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_prepare_response = prepare_response.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    {
                        api_that_guard.prepare_response = api_prepare_response;
                    };
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_add_deposit_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    txid: impl CstDecode<String>,
    vout: impl CstDecode<u32>,
    amount_sats: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_add_deposit",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_txid = txid.cst_decode();
            let api_vout = vout.cst_decode();
            let api_amount_sats = amount_sats.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::SqliteStorage::add_deposit(
                            &*api_that_guard,
                            api_txid,
                            api_vout,
                            api_amount_sats,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_delete_deposit_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    txid: impl CstDecode<String>,
    vout: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_delete_deposit",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_txid = txid.cst_decode();
            let api_vout = vout.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::SqliteStorage::delete_deposit(
                            &*api_that_guard,
                            api_txid,
                            api_vout,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_get_cached_item_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    key: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_get_cached_item",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_key = key.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::SqliteStorage::get_cached_item(&*api_that_guard, api_key),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_get_payment_by_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    id: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_get_payment_by_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::SqliteStorage::get_payment_by_id(&*api_that_guard, api_id),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_insert_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    payment: impl CstDecode<breez_sdk_spark::models::Payment>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_insert_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_payment = payment.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::SqliteStorage::insert_payment(
                            &*api_that_guard,
                            api_payment,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_list_deposits_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_list_deposits",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::SqliteStorage::list_deposits(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_list_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    offset: impl CstDecode<Option<u32>>,
    limit: impl CstDecode<Option<u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_list_payments",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_offset = offset.cst_decode();
            let api_limit = limit.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::SqliteStorage::list_payments(
                            &*api_that_guard,
                            api_offset,
                            api_limit,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Path>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_path = path.cst_decode();
            move |context| {
                transform_result_dco::<_, _, StorageError>((move || {
                    let mut api_path_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_path, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_path_guard = Some(api_path.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_path_guard = api_path_guard.unwrap();
                    let output_ok = breez_sdk_spark::SqliteStorage::new(&*api_path_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_set_cached_item_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    key: impl CstDecode<String>,
    value: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_set_cached_item",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_key = key.cst_decode();
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::SqliteStorage::set_cached_item(
                            &*api_that_guard,
                            api_key,
                            api_value,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_set_payment_metadata_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    payment_id: impl CstDecode<String>,
    metadata: impl CstDecode<breez_sdk_spark::persist::PaymentMetadata>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_set_payment_metadata",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_payment_id = payment_id.cst_decode();
            let api_metadata = metadata.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::SqliteStorage::set_payment_metadata(
                            &*api_that_guard,
                            api_payment_id,
                            api_metadata,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__SqliteStorage_update_deposit_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
    >,
    txid: impl CstDecode<String>,
    vout: impl CstDecode<u32>,
    payload: impl CstDecode<UpdateDepositPayload>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SqliteStorage_update_deposit",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_txid = txid.cst_decode();
            let api_vout = vout.cst_decode();
            let api_payload = payload.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::SqliteStorage::update_deposit(
                            &*api_that_guard,
                            api_txid,
                            api_vout,
                            api_payload,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__binding_event_listener_on_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::BindingEventListener>,
    e: impl CstDecode<SdkEvent>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "binding_event_listener_on_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_e = e.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::BindingEventListener::on_event(&api_that, api_e);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__binding_logger_log_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::BindingLogger>,
    l: impl CstDecode<breez_sdk_spark::models::LogEntry>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "binding_logger_log",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_l = l.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::BindingLogger::log(&api_that, api_l);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__input__bip_21_details_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bip_21_details_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_common::input::Bip21Details::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__input__bip_21_extra_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bip_21_extra_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_common::input::Bip21Extra::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__input__bolt_11_route_hint_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bolt_11_route_hint_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_common::input::Bolt11RouteHint::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__input__bolt_11_route_hint_hop_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "bolt_11_route_hint_hop_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_common::input::Bolt11RouteHintHop::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    request: impl CstDecode<breez_sdk_spark::models::ConnectRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_request = request.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let output_ok = breez_sdk_spark::connect(api_request).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__default_config_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    network: impl CstDecode<breez_sdk_spark::models::Network>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_config",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_network = network.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::default_config(api_network))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__default_storage_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data_dir: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_storage",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data_dir = data_dir.cst_decode();
            move |context| {
                transform_result_dco::<_, _, SdkError>((move || {
                    let output_ok = breez_sdk_spark::default_storage(api_data_dir)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__init_logging_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    log_dir: impl CstDecode<Option<String>>,
    app_logger: impl CstDecode<Option<Box<dyn Logger>>>,
    log_filter: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_logging",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_log_dir = log_dir.cst_decode();
            let api_app_logger = app_logger.cst_decode();
            let api_log_filter = log_filter.cst_decode();
            move |context| {
                transform_result_dco::<_, _, SdkError>((move || {
                    let output_ok =
                        breez_sdk_spark::init_logging(api_log_dir, api_app_logger, api_log_filter)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__models__lnurl_pay_info_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "lnurl_pay_info_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_spark::models::LnurlPayInfo::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__input__parse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ParseError>(
                    (move || async move {
                        let output_ok = breez_sdk_common::input::parse(&api_input).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_spark__parse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, SdkError>(
                    (move || async move {
                        let output_ok = breez_sdk_spark::parse(&api_input).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__breez_sdk_common__input__parse_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_invoice",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(breez_sdk_common::input::parse_invoice(&api_input))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_common__input__payment_request_source_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "payment_request_source_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_common::input::PaymentRequestSource::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__breez_sdk_spark__models__send_onchain_speed_fee_quote_total_fee_sat_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_onchain_speed_fee_quote_total_fee_sat",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        breez_sdk_spark::models::SendOnchainSpeedFeeQuote::total_fee_sat(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let Bip21Details = None::<breez_sdk_common::input::Bip21Details>.unwrap();
        let _: Option<u64> = Bip21Details.amount_sat;
        let _: Option<String> = Bip21Details.asset_id;
        let _: String = Bip21Details.uri;
        let _: Vec<breez_sdk_common::input::Bip21Extra> = Bip21Details.extras;
        let _: Option<String> = Bip21Details.label;
        let _: Option<String> = Bip21Details.message;
        let _: Vec<InputType> = Bip21Details.payment_methods;
    }
    {
        let Bip21Extra = None::<breez_sdk_common::input::Bip21Extra>.unwrap();
        let _: String = Bip21Extra.key;
        let _: String = Bip21Extra.value;
    }
    {
        let Bolt11Invoice = None::<breez_sdk_common::input::Bolt11Invoice>.unwrap();
        let _: String = Bolt11Invoice.bolt11;
        let _: breez_sdk_common::input::PaymentRequestSource = Bolt11Invoice.source;
    }
    {
        let Bolt11InvoiceDetails = None::<breez_sdk_common::input::Bolt11InvoiceDetails>.unwrap();
        let _: Option<u64> = Bolt11InvoiceDetails.amount_msat;
        let _: Option<String> = Bolt11InvoiceDetails.description;
        let _: Option<String> = Bolt11InvoiceDetails.description_hash;
        let _: u64 = Bolt11InvoiceDetails.expiry;
        let _: breez_sdk_common::input::Bolt11Invoice = Bolt11InvoiceDetails.invoice;
        let _: u64 = Bolt11InvoiceDetails.min_final_cltv_expiry_delta;
        let _: breez_sdk_common::network::BitcoinNetwork = Bolt11InvoiceDetails.network;
        let _: String = Bolt11InvoiceDetails.payee_pubkey;
        let _: String = Bolt11InvoiceDetails.payment_hash;
        let _: String = Bolt11InvoiceDetails.payment_secret;
        let _: Vec<breez_sdk_common::input::Bolt11RouteHint> = Bolt11InvoiceDetails.routing_hints;
        let _: u64 = Bolt11InvoiceDetails.timestamp;
    }
    {
        let Bolt11RouteHint = None::<breez_sdk_common::input::Bolt11RouteHint>.unwrap();
        let _: Vec<breez_sdk_common::input::Bolt11RouteHintHop> = Bolt11RouteHint.hops;
    }
    {
        let Bolt11RouteHintHop = None::<breez_sdk_common::input::Bolt11RouteHintHop>.unwrap();
        let _: String = Bolt11RouteHintHop.src_node_id;
        let _: String = Bolt11RouteHintHop.short_channel_id;
        let _: u32 = Bolt11RouteHintHop.fees_base_msat;
        let _: u32 = Bolt11RouteHintHop.fees_proportional_millionths;
        let _: u16 = Bolt11RouteHintHop.cltv_expiry_delta;
        let _: Option<u64> = Bolt11RouteHintHop.htlc_minimum_msat;
        let _: Option<u64> = Bolt11RouteHintHop.htlc_maximum_msat;
    }
    {
        let ClaimDepositRequest = None::<breez_sdk_spark::models::ClaimDepositRequest>.unwrap();
        let _: String = ClaimDepositRequest.txid;
        let _: u32 = ClaimDepositRequest.vout;
        let _: Option<Fee> = ClaimDepositRequest.max_fee;
    }
    {
        let ClaimDepositResponse = None::<breez_sdk_spark::models::ClaimDepositResponse>.unwrap();
        let _: breez_sdk_spark::models::Payment = ClaimDepositResponse.payment;
    }
    {
        let Config = None::<breez_sdk_spark::models::Config>.unwrap();
        let _: Option<String> = Config.api_key;
        let _: breez_sdk_spark::models::Network = Config.network;
        let _: u32 = Config.sync_interval_secs;
        let _: Option<Fee> = Config.max_deposit_claim_fee;
    }
    {
        let ConnectRequest = None::<breez_sdk_spark::models::ConnectRequest>.unwrap();
        let _: breez_sdk_spark::models::Config = ConnectRequest.config;
        let _: String = ConnectRequest.mnemonic;
        let _: String = ConnectRequest.storage_dir;
    }
    {
        let DepositInfo = None::<breez_sdk_spark::models::DepositInfo>.unwrap();
        let _: String = DepositInfo.txid;
        let _: u32 = DepositInfo.vout;
        let _: u64 = DepositInfo.amount_sats;
        let _: Option<String> = DepositInfo.refund_tx;
        let _: Option<String> = DepositInfo.refund_tx_id;
        let _: Option<DepositClaimError> = DepositInfo.claim_error;
    }
    {
        let GetInfoRequest = None::<breez_sdk_spark::models::GetInfoRequest>.unwrap();
    }
    {
        let GetInfoResponse = None::<breez_sdk_spark::models::GetInfoResponse>.unwrap();
        let _: u64 = GetInfoResponse.balance_sats;
    }
    {
        let GetPaymentRequest = None::<breez_sdk_spark::models::GetPaymentRequest>.unwrap();
        let _: String = GetPaymentRequest.payment_id;
    }
    {
        let GetPaymentResponse = None::<breez_sdk_spark::models::GetPaymentResponse>.unwrap();
        let _: breez_sdk_spark::models::Payment = GetPaymentResponse.payment;
    }
    {
        let ListPaymentsRequest = None::<breez_sdk_spark::models::ListPaymentsRequest>.unwrap();
        let _: Option<u32> = ListPaymentsRequest.offset;
        let _: Option<u32> = ListPaymentsRequest.limit;
    }
    {
        let ListPaymentsResponse = None::<breez_sdk_spark::models::ListPaymentsResponse>.unwrap();
        let _: Vec<breez_sdk_spark::models::Payment> = ListPaymentsResponse.payments;
    }
    {
        let ListUnclaimedDepositsRequest =
            None::<breez_sdk_spark::models::ListUnclaimedDepositsRequest>.unwrap();
    }
    {
        let ListUnclaimedDepositsResponse =
            None::<breez_sdk_spark::models::ListUnclaimedDepositsResponse>.unwrap();
        let _: Vec<breez_sdk_spark::models::DepositInfo> = ListUnclaimedDepositsResponse.deposits;
    }
    {
        let LnurlPayInfo = None::<breez_sdk_spark::models::LnurlPayInfo>.unwrap();
        let _: Option<String> = LnurlPayInfo.ln_address;
        let _: Option<String> = LnurlPayInfo.comment;
        let _: Option<String> = LnurlPayInfo.domain;
        let _: Option<String> = LnurlPayInfo.metadata;
        let _: Option<SuccessActionProcessed> = LnurlPayInfo.processed_success_action;
        let _: Option<SuccessAction> = LnurlPayInfo.raw_success_action;
    }
    {
        let LnurlPayRequest = None::<breez_sdk_spark::models::LnurlPayRequest>.unwrap();
        let _: breez_sdk_spark::models::PrepareLnurlPayResponse = LnurlPayRequest.prepare_response;
    }
    {
        let LnurlPayRequestDetails =
            None::<breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>.unwrap();
        let _: String = LnurlPayRequestDetails.callback;
        let _: u64 = LnurlPayRequestDetails.min_sendable;
        let _: u64 = LnurlPayRequestDetails.max_sendable;
        let _: String = LnurlPayRequestDetails.metadata_str;
        let _: u16 = LnurlPayRequestDetails.comment_allowed;
        let _: String = LnurlPayRequestDetails.domain;
        let _: String = LnurlPayRequestDetails.url;
        let _: Option<String> = LnurlPayRequestDetails.address;
        let _: bool = LnurlPayRequestDetails.allows_nostr;
        let _: Option<String> = LnurlPayRequestDetails.nostr_pubkey;
    }
    {
        let LnurlPayResponse = None::<breez_sdk_spark::models::LnurlPayResponse>.unwrap();
        let _: breez_sdk_spark::models::Payment = LnurlPayResponse.payment;
        let _: Option<SuccessActionProcessed> = LnurlPayResponse.success_action;
    }
    {
        let LogEntry = None::<breez_sdk_spark::models::LogEntry>.unwrap();
        let _: String = LogEntry.line;
        let _: String = LogEntry.level;
    }
    {
        let Payment = None::<breez_sdk_spark::models::Payment>.unwrap();
        let _: String = Payment.id;
        let _: breez_sdk_spark::models::PaymentType = Payment.payment_type;
        let _: breez_sdk_spark::models::PaymentStatus = Payment.status;
        let _: u64 = Payment.amount;
        let _: u64 = Payment.fees;
        let _: u64 = Payment.timestamp;
        let _: breez_sdk_spark::models::PaymentMethod = Payment.method;
        let _: Option<PaymentDetails> = Payment.details;
    }
    {
        let PaymentMetadata = None::<breez_sdk_spark::persist::PaymentMetadata>.unwrap();
        let _: Option<breez_sdk_spark::models::LnurlPayInfo> = PaymentMetadata.lnurl_pay_info;
    }
    {
        let PaymentRequestSource = None::<breez_sdk_common::input::PaymentRequestSource>.unwrap();
        let _: Option<String> = PaymentRequestSource.bip_21_uri;
        let _: Option<String> = PaymentRequestSource.bip_353_address;
    }
    {
        let PrepareLnurlPayRequest =
            None::<breez_sdk_spark::models::PrepareLnurlPayRequest>.unwrap();
        let _: u64 = PrepareLnurlPayRequest.amount_sats;
        let _: breez_sdk_common::lnurl::pay::LnurlPayRequestDetails =
            PrepareLnurlPayRequest.pay_request;
        let _: Option<String> = PrepareLnurlPayRequest.comment;
        let _: Option<bool> = PrepareLnurlPayRequest.validate_success_action_url;
    }
    {
        let PrepareLnurlPayResponse =
            None::<breez_sdk_spark::models::PrepareLnurlPayResponse>.unwrap();
        let _: u64 = PrepareLnurlPayResponse.amount_sats;
        let _: Option<String> = PrepareLnurlPayResponse.comment;
        let _: breez_sdk_common::lnurl::pay::LnurlPayRequestDetails =
            PrepareLnurlPayResponse.pay_request;
        let _: u64 = PrepareLnurlPayResponse.fee_sats;
        let _: breez_sdk_common::input::Bolt11InvoiceDetails =
            PrepareLnurlPayResponse.invoice_details;
        let _: Option<SuccessAction> = PrepareLnurlPayResponse.success_action;
    }
    {
        let PrepareSendPaymentRequest =
            None::<breez_sdk_spark::models::PrepareSendPaymentRequest>.unwrap();
        let _: String = PrepareSendPaymentRequest.payment_request;
        let _: Option<u64> = PrepareSendPaymentRequest.amount_sats;
    }
    {
        let ReceivePaymentResponse =
            None::<breez_sdk_spark::models::ReceivePaymentResponse>.unwrap();
        let _: String = ReceivePaymentResponse.payment_request;
        let _: u64 = ReceivePaymentResponse.fee_sats;
    }
    {
        let RefundDepositResponse = None::<breez_sdk_spark::models::RefundDepositResponse>.unwrap();
        let _: String = RefundDepositResponse.tx_id;
        let _: String = RefundDepositResponse.tx_hex;
    }
    {
        let SendOnchainSpeedFeeQuote =
            None::<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>.unwrap();
        let _: u64 = SendOnchainSpeedFeeQuote.user_fee_sat;
        let _: u64 = SendOnchainSpeedFeeQuote.l1_broadcast_fee_sat;
    }
    {
        let SendPaymentResponse = None::<breez_sdk_spark::models::SendPaymentResponse>.unwrap();
        let _: breez_sdk_spark::models::Payment = SendPaymentResponse.payment;
    }
    {
        let SyncWalletRequest = None::<breez_sdk_spark::models::SyncWalletRequest>.unwrap();
    }
    {
        let SyncWalletResponse = None::<breez_sdk_spark::models::SyncWalletResponse>.unwrap();
    }
};

// Section: extra_from_parser

pub enum RestClientImplementor {
    Variant0(RustAutoOpaque<ReqwestRestClient>),
}

pub fn frb_internal_no_impl_dummy_function_RestClientImplementor(a: RestClientImplementor) {}

impl RestClientImplementor {
    pub fn blocking_read(&self) -> RestClientImplementorRwLockReadGuard {
        match self {
            Self::Variant0(inner) => {
                RestClientImplementorRwLockReadGuard::Variant0(inner.blocking_read())
            }
        }
    }

    pub fn blocking_write(&self) -> RestClientImplementorRwLockWriteGuard {
        match self {
            Self::Variant0(inner) => {
                RestClientImplementorRwLockWriteGuard::Variant0(inner.blocking_write())
            }
        }
    }

    pub async fn read(&self) -> RestClientImplementorRwLockReadGuard {
        match self {
            Self::Variant0(inner) => {
                RestClientImplementorRwLockReadGuard::Variant0(inner.read().await)
            }
        }
    }

    pub async fn write(&self) -> RestClientImplementorRwLockWriteGuard {
        match self {
            Self::Variant0(inner) => {
                RestClientImplementorRwLockWriteGuard::Variant0(inner.write().await)
            }
        }
    }
}

impl Lockable for RestClientImplementor {
    type RwLockReadGuard<'a> = RestClientImplementorRwLockReadGuard<'a>;
    type RwLockWriteGuard<'a> = RestClientImplementorRwLockWriteGuard<'a>;

    fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {
        match self {
            Self::Variant0(inner) => {
                flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner)
            }
        }
    }

    fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {
        self.blocking_read()
    }

    fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {
        self.blocking_write()
    }

    fn lockable_decode_async_ref<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.read().await })
    }

    fn lockable_decode_async_ref_mut<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.write().await })
    }
}

pub enum RestClientImplementorRwLockReadGuard<'a> {
    Variant0(
        flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, ReqwestRestClient>,
    ),
}

impl std::ops::Deref for RestClientImplementorRwLockReadGuard<'_> {
    type Target = dyn RestClient;

    fn deref(&self) -> &Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref(),
        }
    }
}

pub enum RestClientImplementorRwLockWriteGuard<'a> {
    Variant0(
        flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, ReqwestRestClient>,
    ),
}

impl std::ops::Deref for RestClientImplementorRwLockWriteGuard<'_> {
    type Target = dyn RestClient;

    fn deref(&self) -> &Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref(),
        }
    }
}

impl std::ops::DerefMut for RestClientImplementorRwLockWriteGuard<'_> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref_mut(),
        }
    }
}

pub enum EventListenerImplementor {
    Variant0(RustAutoOpaque<crate::BindingEventListener>),
}

pub fn frb_internal_no_impl_dummy_function_EventListenerImplementor(a: EventListenerImplementor) {}

impl EventListenerImplementor {
    pub fn blocking_read(&self) -> EventListenerImplementorRwLockReadGuard {
        match self {
            Self::Variant0(inner) => {
                EventListenerImplementorRwLockReadGuard::Variant0(inner.blocking_read())
            }
        }
    }

    pub fn blocking_write(&self) -> EventListenerImplementorRwLockWriteGuard {
        match self {
            Self::Variant0(inner) => {
                EventListenerImplementorRwLockWriteGuard::Variant0(inner.blocking_write())
            }
        }
    }

    pub async fn read(&self) -> EventListenerImplementorRwLockReadGuard {
        match self {
            Self::Variant0(inner) => {
                EventListenerImplementorRwLockReadGuard::Variant0(inner.read().await)
            }
        }
    }

    pub async fn write(&self) -> EventListenerImplementorRwLockWriteGuard {
        match self {
            Self::Variant0(inner) => {
                EventListenerImplementorRwLockWriteGuard::Variant0(inner.write().await)
            }
        }
    }
}

impl Lockable for EventListenerImplementor {
    type RwLockReadGuard<'a> = EventListenerImplementorRwLockReadGuard<'a>;
    type RwLockWriteGuard<'a> = EventListenerImplementorRwLockWriteGuard<'a>;

    fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {
        match self {
            Self::Variant0(inner) => {
                flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner)
            }
        }
    }

    fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {
        self.blocking_read()
    }

    fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {
        self.blocking_write()
    }

    fn lockable_decode_async_ref<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.read().await })
    }

    fn lockable_decode_async_ref_mut<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.write().await })
    }
}

pub enum EventListenerImplementorRwLockReadGuard<'a> {
    Variant0(
        flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<
            'a,
            crate::BindingEventListener,
        >,
    ),
}

impl std::ops::Deref for EventListenerImplementorRwLockReadGuard<'_> {
    type Target = dyn EventListener;

    fn deref(&self) -> &Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref(),
        }
    }
}

pub enum EventListenerImplementorRwLockWriteGuard<'a> {
    Variant0(
        flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<
            'a,
            crate::BindingEventListener,
        >,
    ),
}

impl std::ops::Deref for EventListenerImplementorRwLockWriteGuard<'_> {
    type Target = dyn EventListener;

    fn deref(&self) -> &Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref(),
        }
    }
}

impl std::ops::DerefMut for EventListenerImplementorRwLockWriteGuard<'_> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref_mut(),
        }
    }
}

pub enum LoggerImplementor {
    Variant0(RustAutoOpaque<crate::BindingLogger>),
}

pub fn frb_internal_no_impl_dummy_function_LoggerImplementor(a: LoggerImplementor) {}

impl LoggerImplementor {
    pub fn blocking_read(&self) -> LoggerImplementorRwLockReadGuard {
        match self {
            Self::Variant0(inner) => {
                LoggerImplementorRwLockReadGuard::Variant0(inner.blocking_read())
            }
        }
    }

    pub fn blocking_write(&self) -> LoggerImplementorRwLockWriteGuard {
        match self {
            Self::Variant0(inner) => {
                LoggerImplementorRwLockWriteGuard::Variant0(inner.blocking_write())
            }
        }
    }

    pub async fn read(&self) -> LoggerImplementorRwLockReadGuard {
        match self {
            Self::Variant0(inner) => LoggerImplementorRwLockReadGuard::Variant0(inner.read().await),
        }
    }

    pub async fn write(&self) -> LoggerImplementorRwLockWriteGuard {
        match self {
            Self::Variant0(inner) => {
                LoggerImplementorRwLockWriteGuard::Variant0(inner.write().await)
            }
        }
    }
}

impl Lockable for LoggerImplementor {
    type RwLockReadGuard<'a> = LoggerImplementorRwLockReadGuard<'a>;
    type RwLockWriteGuard<'a> = LoggerImplementorRwLockWriteGuard<'a>;

    fn lockable_order(&self) -> flutter_rust_bridge::for_generated::LockableOrder {
        match self {
            Self::Variant0(inner) => {
                flutter_rust_bridge::for_generated::rust_auto_opaque_lockable_order(inner)
            }
        }
    }

    fn lockable_decode_sync_ref(&self) -> Self::RwLockReadGuard<'_> {
        self.blocking_read()
    }

    fn lockable_decode_sync_ref_mut(&self) -> Self::RwLockWriteGuard<'_> {
        self.blocking_write()
    }

    fn lockable_decode_async_ref<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockReadGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.read().await })
    }

    fn lockable_decode_async_ref_mut<'a>(
        &'a self,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Self::RwLockWriteGuard<'a>> + Send + 'a>>
    where
        Self: Sync + 'a,
    {
        Box::pin(async move { self.write().await })
    }
}

pub enum LoggerImplementorRwLockReadGuard<'a> {
    Variant0(
        flutter_rust_bridge::for_generated::rust_async::RwLockReadGuard<'a, crate::BindingLogger>,
    ),
}

impl std::ops::Deref for LoggerImplementorRwLockReadGuard<'_> {
    type Target = dyn Logger;

    fn deref(&self) -> &Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref(),
        }
    }
}

pub enum LoggerImplementorRwLockWriteGuard<'a> {
    Variant0(
        flutter_rust_bridge::for_generated::rust_async::RwLockWriteGuard<'a, crate::BindingLogger>,
    ),
}

impl std::ops::Deref for LoggerImplementorRwLockWriteGuard<'_> {
    type Target = dyn Logger;

    fn deref(&self) -> &Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref(),
        }
    }
}

impl std::ops::DerefMut for LoggerImplementorRwLockWriteGuard<'_> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        match self {
            Self::Variant0(inner) => inner.deref_mut(),
        }
    }
}

// Section: dart2rust

impl CstDecode<breez_sdk_common::network::BitcoinNetwork> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> breez_sdk_common::network::BitcoinNetwork {
        match self {
            0 => breez_sdk_common::network::BitcoinNetwork::Bitcoin,
            1 => breez_sdk_common::network::BitcoinNetwork::Testnet3,
            2 => breez_sdk_common::network::BitcoinNetwork::Testnet4,
            3 => breez_sdk_common::network::BitcoinNetwork::Signet,
            4 => breez_sdk_common::network::BitcoinNetwork::Regtest,
            _ => unreachable!("Invalid variant for BitcoinNetwork: {}", self),
        }
    }
}
impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<breez_sdk_spark::models::Network> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> breez_sdk_spark::models::Network {
        match self {
            0 => breez_sdk_spark::models::Network::Mainnet,
            1 => breez_sdk_spark::models::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl CstDecode<breez_sdk_spark::models::PaymentMethod> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> breez_sdk_spark::models::PaymentMethod {
        match self {
            0 => breez_sdk_spark::models::PaymentMethod::Lightning,
            1 => breez_sdk_spark::models::PaymentMethod::Spark,
            2 => breez_sdk_spark::models::PaymentMethod::Deposit,
            3 => breez_sdk_spark::models::PaymentMethod::Withdraw,
            4 => breez_sdk_spark::models::PaymentMethod::Unknown,
            _ => unreachable!("Invalid variant for PaymentMethod: {}", self),
        }
    }
}
impl CstDecode<breez_sdk_spark::models::PaymentStatus> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> breez_sdk_spark::models::PaymentStatus {
        match self {
            0 => breez_sdk_spark::models::PaymentStatus::Completed,
            1 => breez_sdk_spark::models::PaymentStatus::Pending,
            2 => breez_sdk_spark::models::PaymentStatus::Failed,
            _ => unreachable!("Invalid variant for PaymentStatus: {}", self),
        }
    }
}
impl CstDecode<breez_sdk_spark::models::PaymentType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> breez_sdk_spark::models::PaymentType {
        match self {
            0 => breez_sdk_spark::models::PaymentType::Send,
            1 => breez_sdk_spark::models::PaymentType::Receive,
            _ => unreachable!("Invalid variant for PaymentType: {}", self),
        }
    }
}
impl CstDecode<u16> for u16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<BindingEventListener> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingEventListener>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<BindingLogger> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLogger>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<ReqwestRestClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for Arc<dyn Storage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<dyn Storage>>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for BasicAuth {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for BreezSdk {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for BreezServer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for DepositClaimError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for EventEmitter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Fee {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ParseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for PaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait,
                    >,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<
        Box<Future<Output = Result<RestResponse, ServiceConnectivityError>> + Send + 'async_trait>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<RestResponse, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<DepositInfo>, StorageError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<
        Box<
            Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                + Send
                + 'async_trait,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<
        Box<Future<Output = Result<Vec<Rate>, ServiceConnectivityError>> + Send + 'async_trait>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait,
                    >,
                >,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for PrepareSendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ReceivePaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ReceivePaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for RefundDepositRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ReqwestRestClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for RestClientChainService {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SdkBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SdkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SendPaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SendPaymentOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ServiceConnectivityError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SqliteStorage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for StorageError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SuccessAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for UpdateDepositPayload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<dyn Storage>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingEventListener>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLogger>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Path>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<
                    Future<Output = Result<RestResponse, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for StreamSink<SdkEvent, flutter_rust_bridge::for_generated::DcoCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<breez_sdk_spark::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::BindingEventListener {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_listener =
            <StreamSink<SdkEvent, flutter_rust_bridge::for_generated::DcoCodec>>::sse_decode(
                deserializer,
            );
        return crate::BindingEventListener {
            listener: var_listener,
        };
    }
}

impl SseDecode for crate::BindingLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_logger = <StreamSink<
            breez_sdk_spark::models::LogEntry,
            flutter_rust_bridge::for_generated::DcoCodec,
        >>::sse_decode(deserializer);
        return crate::BindingLogger { logger: var_logger };
    }
}

impl SseDecode for breez_sdk_common::input::Bip21Details {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_assetId = <Option<String>>::sse_decode(deserializer);
        let mut var_uri = <String>::sse_decode(deserializer);
        let mut var_extras = <Vec<breez_sdk_common::input::Bip21Extra>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_message = <Option<String>>::sse_decode(deserializer);
        let mut var_paymentMethods = <Vec<InputType>>::sse_decode(deserializer);
        return breez_sdk_common::input::Bip21Details {
            amount_sat: var_amountSat,
            asset_id: var_assetId,
            uri: var_uri,
            extras: var_extras,
            label: var_label,
            message: var_message,
            payment_methods: var_paymentMethods,
        };
    }
}

impl SseDecode for breez_sdk_common::input::Bip21Extra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return breez_sdk_common::input::Bip21Extra {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for breez_sdk_common::network::BitcoinNetwork {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => breez_sdk_common::network::BitcoinNetwork::Bitcoin,
            1 => breez_sdk_common::network::BitcoinNetwork::Testnet3,
            2 => breez_sdk_common::network::BitcoinNetwork::Testnet4,
            3 => breez_sdk_common::network::BitcoinNetwork::Signet,
            4 => breez_sdk_common::network::BitcoinNetwork::Regtest,
            _ => unreachable!("Invalid variant for BitcoinNetwork: {}", inner),
        };
    }
}

impl SseDecode for breez_sdk_common::input::Bolt11Invoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bolt11 = <String>::sse_decode(deserializer);
        let mut var_source =
            <breez_sdk_common::input::PaymentRequestSource>::sse_decode(deserializer);
        return breez_sdk_common::input::Bolt11Invoice {
            bolt11: var_bolt11,
            source: var_source,
        };
    }
}

impl SseDecode for breez_sdk_common::input::Bolt11InvoiceDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_descriptionHash = <Option<String>>::sse_decode(deserializer);
        let mut var_expiry = <u64>::sse_decode(deserializer);
        let mut var_invoice = <breez_sdk_common::input::Bolt11Invoice>::sse_decode(deserializer);
        let mut var_minFinalCltvExpiryDelta = <u64>::sse_decode(deserializer);
        let mut var_network = <breez_sdk_common::network::BitcoinNetwork>::sse_decode(deserializer);
        let mut var_payeePubkey = <String>::sse_decode(deserializer);
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_paymentSecret = <String>::sse_decode(deserializer);
        let mut var_routingHints =
            <Vec<breez_sdk_common::input::Bolt11RouteHint>>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        return breez_sdk_common::input::Bolt11InvoiceDetails {
            amount_msat: var_amountMsat,
            description: var_description,
            description_hash: var_descriptionHash,
            expiry: var_expiry,
            invoice: var_invoice,
            min_final_cltv_expiry_delta: var_minFinalCltvExpiryDelta,
            network: var_network,
            payee_pubkey: var_payeePubkey,
            payment_hash: var_paymentHash,
            payment_secret: var_paymentSecret,
            routing_hints: var_routingHints,
            timestamp: var_timestamp,
        };
    }
}

impl SseDecode for breez_sdk_common::input::Bolt11RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hops =
            <Vec<breez_sdk_common::input::Bolt11RouteHintHop>>::sse_decode(deserializer);
        return breez_sdk_common::input::Bolt11RouteHint { hops: var_hops };
    }
}

impl SseDecode for breez_sdk_common::input::Bolt11RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_srcNodeId = <String>::sse_decode(deserializer);
        let mut var_shortChannelId = <String>::sse_decode(deserializer);
        let mut var_feesBaseMsat = <u32>::sse_decode(deserializer);
        let mut var_feesProportionalMillionths = <u32>::sse_decode(deserializer);
        let mut var_cltvExpiryDelta = <u16>::sse_decode(deserializer);
        let mut var_htlcMinimumMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_htlcMaximumMsat = <Option<u64>>::sse_decode(deserializer);
        return breez_sdk_common::input::Bolt11RouteHintHop {
            src_node_id: var_srcNodeId,
            short_channel_id: var_shortChannelId,
            fees_base_msat: var_feesBaseMsat,
            fees_proportional_millionths: var_feesProportionalMillionths,
            cltv_expiry_delta: var_cltvExpiryDelta,
            htlc_minimum_msat: var_htlcMinimumMsat,
            htlc_maximum_msat: var_htlcMaximumMsat,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for Box<dyn EventListener> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<dyn EventListener>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<dyn Logger> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<dyn Logger>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<dyn RestClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<dyn RestClient>::sse_decode(deserializer));
    }
}

impl SseDecode for breez_sdk_spark::models::ClaimDepositRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_vout = <u32>::sse_decode(deserializer);
        let mut var_maxFee = <Option<Fee>>::sse_decode(deserializer);
        return breez_sdk_spark::models::ClaimDepositRequest {
            txid: var_txid,
            vout: var_vout,
            max_fee: var_maxFee,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::ClaimDepositResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <breez_sdk_spark::models::Payment>::sse_decode(deserializer);
        return breez_sdk_spark::models::ClaimDepositResponse {
            payment: var_payment,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_apiKey = <Option<String>>::sse_decode(deserializer);
        let mut var_network = <breez_sdk_spark::models::Network>::sse_decode(deserializer);
        let mut var_syncIntervalSecs = <u32>::sse_decode(deserializer);
        let mut var_maxDepositClaimFee = <Option<Fee>>::sse_decode(deserializer);
        return breez_sdk_spark::models::Config {
            api_key: var_apiKey,
            network: var_network,
            sync_interval_secs: var_syncIntervalSecs,
            max_deposit_claim_fee: var_maxDepositClaimFee,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_config = <breez_sdk_spark::models::Config>::sse_decode(deserializer);
        let mut var_mnemonic = <String>::sse_decode(deserializer);
        let mut var_storageDir = <String>::sse_decode(deserializer);
        return breez_sdk_spark::models::ConnectRequest {
            config: var_config,
            mnemonic: var_mnemonic,
            storage_dir: var_storageDir,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::DepositInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_vout = <u32>::sse_decode(deserializer);
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_refundTx = <Option<String>>::sse_decode(deserializer);
        let mut var_refundTxId = <Option<String>>::sse_decode(deserializer);
        let mut var_claimError = <Option<DepositClaimError>>::sse_decode(deserializer);
        return breez_sdk_spark::models::DepositInfo {
            txid: var_txid,
            vout: var_vout,
            amount_sats: var_amountSats,
            refund_tx: var_refundTx,
            refund_tx_id: var_refundTxId,
            claim_error: var_claimError,
        };
    }
}

impl SseDecode for crate::frb_generated::EventListenerImplementor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <RustAutoOpaqueNom<BindingEventListener>>::sse_decode(deserializer);
                return crate::frb_generated::EventListenerImplementor::Variant0(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for breez_sdk_spark::models::GetInfoRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return breez_sdk_spark::models::GetInfoRequest {};
    }
}

impl SseDecode for breez_sdk_spark::models::GetInfoResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_balanceSats = <u64>::sse_decode(deserializer);
        return breez_sdk_spark::models::GetInfoResponse {
            balance_sats: var_balanceSats,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::GetPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentId = <String>::sse_decode(deserializer);
        return breez_sdk_spark::models::GetPaymentRequest {
            payment_id: var_paymentId,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::GetPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <breez_sdk_spark::models::Payment>::sse_decode(deserializer);
        return breez_sdk_spark::models::GetPaymentResponse {
            payment: var_payment,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<InputType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<InputType>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<breez_sdk_common::input::Bip21Extra> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<breez_sdk_common::input::Bip21Extra>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<breez_sdk_common::input::Bolt11RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<breez_sdk_common::input::Bolt11RouteHint>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<breez_sdk_common::input::Bolt11RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<breez_sdk_common::input::Bolt11RouteHintHop>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<breez_sdk_spark::models::DepositInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<breez_sdk_spark::models::DepositInfo>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<breez_sdk_spark::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<breez_sdk_spark::models::Payment>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for breez_sdk_spark::models::ListPaymentsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_offset = <Option<u32>>::sse_decode(deserializer);
        let mut var_limit = <Option<u32>>::sse_decode(deserializer);
        return breez_sdk_spark::models::ListPaymentsRequest {
            offset: var_offset,
            limit: var_limit,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::ListPaymentsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payments = <Vec<breez_sdk_spark::models::Payment>>::sse_decode(deserializer);
        return breez_sdk_spark::models::ListPaymentsResponse {
            payments: var_payments,
        };
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for breez_sdk_spark::models::ListUnclaimedDepositsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return breez_sdk_spark::models::ListUnclaimedDepositsRequest {};
    }
}

impl SseDecode for breez_sdk_spark::models::ListUnclaimedDepositsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deposits =
            <Vec<breez_sdk_spark::models::DepositInfo>>::sse_decode(deserializer);
        return breez_sdk_spark::models::ListUnclaimedDepositsResponse {
            deposits: var_deposits,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::LnurlPayInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_lnAddress = <Option<String>>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        let mut var_domain = <Option<String>>::sse_decode(deserializer);
        let mut var_metadata = <Option<String>>::sse_decode(deserializer);
        let mut var_processedSuccessAction =
            <Option<SuccessActionProcessed>>::sse_decode(deserializer);
        let mut var_rawSuccessAction = <Option<SuccessAction>>::sse_decode(deserializer);
        return breez_sdk_spark::models::LnurlPayInfo {
            ln_address: var_lnAddress,
            comment: var_comment,
            domain: var_domain,
            metadata: var_metadata,
            processed_success_action: var_processedSuccessAction,
            raw_success_action: var_rawSuccessAction,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::LnurlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prepareResponse =
            <breez_sdk_spark::models::PrepareLnurlPayResponse>::sse_decode(deserializer);
        return breez_sdk_spark::models::LnurlPayRequest {
            prepare_response: var_prepareResponse,
        };
    }
}

impl SseDecode for breez_sdk_common::lnurl::pay::LnurlPayRequestDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_callback = <String>::sse_decode(deserializer);
        let mut var_minSendable = <u64>::sse_decode(deserializer);
        let mut var_maxSendable = <u64>::sse_decode(deserializer);
        let mut var_metadataStr = <String>::sse_decode(deserializer);
        let mut var_commentAllowed = <u16>::sse_decode(deserializer);
        let mut var_domain = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_address = <Option<String>>::sse_decode(deserializer);
        let mut var_allowsNostr = <bool>::sse_decode(deserializer);
        let mut var_nostrPubkey = <Option<String>>::sse_decode(deserializer);
        return breez_sdk_common::lnurl::pay::LnurlPayRequestDetails {
            callback: var_callback,
            min_sendable: var_minSendable,
            max_sendable: var_maxSendable,
            metadata_str: var_metadataStr,
            comment_allowed: var_commentAllowed,
            domain: var_domain,
            url: var_url,
            address: var_address,
            allows_nostr: var_allowsNostr,
            nostr_pubkey: var_nostrPubkey,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::LnurlPayResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <breez_sdk_spark::models::Payment>::sse_decode(deserializer);
        let mut var_successAction = <Option<SuccessActionProcessed>>::sse_decode(deserializer);
        return breez_sdk_spark::models::LnurlPayResponse {
            payment: var_payment,
            success_action: var_successAction,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_line = <String>::sse_decode(deserializer);
        let mut var_level = <String>::sse_decode(deserializer);
        return breez_sdk_spark::models::LogEntry {
            line: var_line,
            level: var_level,
        };
    }
}

impl SseDecode for crate::frb_generated::LoggerImplementor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustAutoOpaqueNom<BindingLogger>>::sse_decode(deserializer);
                return crate::frb_generated::LoggerImplementor::Variant0(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for breez_sdk_spark::models::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => breez_sdk_spark::models::Network::Mainnet,
            1 => breez_sdk_spark::models::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<std::collections::HashMap<String, String>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<dyn Logger>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<dyn Logger>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<BasicAuth> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<BasicAuth>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<DepositClaimError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<DepositClaimError>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Fee> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Fee>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<PaymentDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<PaymentDetails>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<SendPaymentOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<SendPaymentOptions>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<SuccessAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<SuccessAction>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<SuccessActionProcessed>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<breez_sdk_common::input::Bolt11InvoiceDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<breez_sdk_common::input::Bolt11InvoiceDetails>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<breez_sdk_spark::models::LnurlPayInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<breez_sdk_spark::models::LnurlPayInfo>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for breez_sdk_spark::models::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_paymentType = <breez_sdk_spark::models::PaymentType>::sse_decode(deserializer);
        let mut var_status = <breez_sdk_spark::models::PaymentStatus>::sse_decode(deserializer);
        let mut var_amount = <u64>::sse_decode(deserializer);
        let mut var_fees = <u64>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        let mut var_method = <breez_sdk_spark::models::PaymentMethod>::sse_decode(deserializer);
        let mut var_details = <Option<PaymentDetails>>::sse_decode(deserializer);
        return breez_sdk_spark::models::Payment {
            id: var_id,
            payment_type: var_paymentType,
            status: var_status,
            amount: var_amount,
            fees: var_fees,
            timestamp: var_timestamp,
            method: var_method,
            details: var_details,
        };
    }
}

impl SseDecode for breez_sdk_spark::persist::PaymentMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_lnurlPayInfo =
            <Option<breez_sdk_spark::models::LnurlPayInfo>>::sse_decode(deserializer);
        return breez_sdk_spark::persist::PaymentMetadata {
            lnurl_pay_info: var_lnurlPayInfo,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => breez_sdk_spark::models::PaymentMethod::Lightning,
            1 => breez_sdk_spark::models::PaymentMethod::Spark,
            2 => breez_sdk_spark::models::PaymentMethod::Deposit,
            3 => breez_sdk_spark::models::PaymentMethod::Withdraw,
            4 => breez_sdk_spark::models::PaymentMethod::Unknown,
            _ => unreachable!("Invalid variant for PaymentMethod: {}", inner),
        };
    }
}

impl SseDecode for breez_sdk_common::input::PaymentRequestSource {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bip21Uri = <Option<String>>::sse_decode(deserializer);
        let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
        return breez_sdk_common::input::PaymentRequestSource {
            bip_21_uri: var_bip21Uri,
            bip_353_address: var_bip353Address,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => breez_sdk_spark::models::PaymentStatus::Completed,
            1 => breez_sdk_spark::models::PaymentStatus::Pending,
            2 => breez_sdk_spark::models::PaymentStatus::Failed,
            _ => unreachable!("Invalid variant for PaymentStatus: {}", inner),
        };
    }
}

impl SseDecode for breez_sdk_spark::models::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => breez_sdk_spark::models::PaymentType::Send,
            1 => breez_sdk_spark::models::PaymentType::Receive,
            _ => unreachable!("Invalid variant for PaymentType: {}", inner),
        };
    }
}

impl SseDecode for breez_sdk_spark::models::PrepareLnurlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_payRequest =
            <breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        let mut var_validateSuccessActionUrl = <Option<bool>>::sse_decode(deserializer);
        return breez_sdk_spark::models::PrepareLnurlPayRequest {
            amount_sats: var_amountSats,
            pay_request: var_payRequest,
            comment: var_comment,
            validate_success_action_url: var_validateSuccessActionUrl,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::PrepareLnurlPayResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        let mut var_payRequest =
            <breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>::sse_decode(deserializer);
        let mut var_feeSats = <u64>::sse_decode(deserializer);
        let mut var_invoiceDetails =
            <breez_sdk_common::input::Bolt11InvoiceDetails>::sse_decode(deserializer);
        let mut var_successAction = <Option<SuccessAction>>::sse_decode(deserializer);
        return breez_sdk_spark::models::PrepareLnurlPayResponse {
            amount_sats: var_amountSats,
            comment: var_comment,
            pay_request: var_payRequest,
            fee_sats: var_feeSats,
            invoice_details: var_invoiceDetails,
            success_action: var_successAction,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::PrepareSendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentRequest = <String>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        return breez_sdk_spark::models::PrepareSendPaymentRequest {
            payment_request: var_paymentRequest,
            amount_sats: var_amountSats,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentRequest = <String>::sse_decode(deserializer);
        let mut var_feeSats = <u64>::sse_decode(deserializer);
        return breez_sdk_spark::models::ReceivePaymentResponse {
            payment_request: var_paymentRequest,
            fee_sats: var_feeSats,
        };
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for breez_sdk_spark::models::RefundDepositResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txId = <String>::sse_decode(deserializer);
        let mut var_txHex = <String>::sse_decode(deserializer);
        return breez_sdk_spark::models::RefundDepositResponse {
            tx_id: var_txId,
            tx_hex: var_txHex,
        };
    }
}

impl SseDecode for crate::frb_generated::RestClientImplementor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <RustAutoOpaqueNom<ReqwestRestClient>>::sse_decode(deserializer);
                return crate::frb_generated::RestClientImplementor::Variant0(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for breez_sdk_spark::models::SendOnchainSpeedFeeQuote {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_userFeeSat = <u64>::sse_decode(deserializer);
        let mut var_l1BroadcastFeeSat = <u64>::sse_decode(deserializer);
        return breez_sdk_spark::models::SendOnchainSpeedFeeQuote {
            user_fee_sat: var_userFeeSat,
            l1_broadcast_fee_sat: var_l1BroadcastFeeSat,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <breez_sdk_spark::models::Payment>::sse_decode(deserializer);
        return breez_sdk_spark::models::SendPaymentResponse {
            payment: var_payment,
        };
    }
}

impl SseDecode for breez_sdk_spark::models::SyncWalletRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return breez_sdk_spark::models::SyncWalletRequest {};
    }
}

impl SseDecode for breez_sdk_spark::models::SyncWalletResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return breez_sdk_spark::models::SyncWalletResponse {};
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Arc<dyn Storage>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Arc<dyn Storage>> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Arc<dyn Storage>>> for Arc<dyn Storage> {
    fn into_into_dart(self) -> FrbWrapper<Arc<dyn Storage>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<BasicAuth> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BasicAuth> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BasicAuth>> for BasicAuth {
    fn into_into_dart(self) -> FrbWrapper<BasicAuth> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<BreezSdk> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BreezSdk> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BreezSdk>> for BreezSdk {
    fn into_into_dart(self) -> FrbWrapper<BreezSdk> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<BreezServer> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BreezServer> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BreezServer>> for BreezServer {
    fn into_into_dart(self) -> FrbWrapper<BreezServer> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<DepositClaimError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<DepositClaimError> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<DepositClaimError>> for DepositClaimError {
    fn into_into_dart(self) -> FrbWrapper<DepositClaimError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<EventEmitter> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<EventEmitter> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<EventEmitter>> for EventEmitter {
    fn into_into_dart(self) -> FrbWrapper<EventEmitter> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Fee> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Fee> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Fee>> for Fee {
    fn into_into_dart(self) -> FrbWrapper<Fee> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<InputType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<InputType> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<InputType>> for InputType {
    fn into_into_dart(self) -> FrbWrapper<InputType> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ParseError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ParseError> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ParseError>> for ParseError {
    fn into_into_dart(self) -> FrbWrapper<ParseError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<PaymentDetails> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<PaymentDetails> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<PaymentDetails>> for PaymentDetails {
    fn into_into_dart(self) -> FrbWrapper<PaymentDetails> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>,
        >,
    > for ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>>
    {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>,
        >,
    > for ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>,
        >,
    > for ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>>
    {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<
            Box<
                Future<Output = Result<RestResponse, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        >,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<
            Box<
                Future<Output = Result<RestResponse, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        >,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<
                Box<
                    Future<Output = Result<RestResponse, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
    for ::Pin<
        Box<Future<Output = Result<RestResponse, ServiceConnectivityError>> + Send + 'async_trait>,
    >
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<
            Box<
                Future<Output = Result<RestResponse, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        >,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>>,
    > for ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>>
    {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>,
        >,
    > for ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>>,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>>,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<
                Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>,
            >,
        >,
    >
    for ::Pin<Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>>,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<
            Box<
                Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        >,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<
            Box<
                Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        >,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
    for ::Pin<
        Box<
            Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                + Send
                + 'async_trait,
        >,
    >
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<
            Box<
                Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        >,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>,
        >,
    > for ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<
            Box<Future<Output = Result<Vec<Rate>, ServiceConnectivityError>> + Send + 'async_trait>,
        >,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<
            Box<Future<Output = Result<Vec<Rate>, ServiceConnectivityError>> + Send + 'async_trait>,
        >,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
    for ::Pin<
        Box<Future<Output = Result<Vec<Rate>, ServiceConnectivityError>> + Send + 'async_trait>,
    >
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<
            Box<Future<Output = Result<Vec<Rate>, ServiceConnectivityError>> + Send + 'async_trait>,
        >,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>,
    >
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>,
    >
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<
            ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>,
        >,
    > for ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<
        ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>,
    > {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<PrepareSendPaymentResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<PrepareSendPaymentResponse>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<PrepareSendPaymentResponse>>
    for PrepareSendPaymentResponse
{
    fn into_into_dart(self) -> FrbWrapper<PrepareSendPaymentResponse> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ReceivePaymentMethod> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ReceivePaymentMethod>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ReceivePaymentMethod>> for ReceivePaymentMethod {
    fn into_into_dart(self) -> FrbWrapper<ReceivePaymentMethod> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ReceivePaymentRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ReceivePaymentRequest>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ReceivePaymentRequest>>
    for ReceivePaymentRequest
{
    fn into_into_dart(self) -> FrbWrapper<ReceivePaymentRequest> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<RefundDepositRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<RefundDepositRequest>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RefundDepositRequest>> for RefundDepositRequest {
    fn into_into_dart(self) -> FrbWrapper<RefundDepositRequest> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ReqwestRestClient> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ReqwestRestClient> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ReqwestRestClient>> for ReqwestRestClient {
    fn into_into_dart(self) -> FrbWrapper<ReqwestRestClient> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<RestClientChainService> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<RestClientChainService>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RestClientChainService>>
    for RestClientChainService
{
    fn into_into_dart(self) -> FrbWrapper<RestClientChainService> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SdkBuilder> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SdkBuilder> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SdkBuilder>> for SdkBuilder {
    fn into_into_dart(self) -> FrbWrapper<SdkBuilder> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SdkError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SdkError> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SdkError>> for SdkError {
    fn into_into_dart(self) -> FrbWrapper<SdkError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SdkEvent> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SdkEvent> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SdkEvent>> for SdkEvent {
    fn into_into_dart(self) -> FrbWrapper<SdkEvent> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SendPaymentMethod> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SendPaymentMethod> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SendPaymentMethod>> for SendPaymentMethod {
    fn into_into_dart(self) -> FrbWrapper<SendPaymentMethod> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SendPaymentOptions> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<SendPaymentOptions>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SendPaymentOptions>> for SendPaymentOptions {
    fn into_into_dart(self) -> FrbWrapper<SendPaymentOptions> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SendPaymentRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<SendPaymentRequest>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SendPaymentRequest>> for SendPaymentRequest {
    fn into_into_dart(self) -> FrbWrapper<SendPaymentRequest> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ServiceConnectivityError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ServiceConnectivityError>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ServiceConnectivityError>>
    for ServiceConnectivityError
{
    fn into_into_dart(self) -> FrbWrapper<ServiceConnectivityError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SqliteStorage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SqliteStorage> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SqliteStorage>> for SqliteStorage {
    fn into_into_dart(self) -> FrbWrapper<SqliteStorage> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<StorageError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<StorageError> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<StorageError>> for StorageError {
    fn into_into_dart(self) -> FrbWrapper<StorageError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SuccessAction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SuccessAction> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SuccessAction>> for SuccessAction {
    fn into_into_dart(self) -> FrbWrapper<SuccessAction> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SuccessActionProcessed> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<SuccessActionProcessed>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SuccessActionProcessed>>
    for SuccessActionProcessed
{
    fn into_into_dart(self) -> FrbWrapper<SuccessActionProcessed> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<UpdateDepositPayload> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<UpdateDepositPayload>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<UpdateDepositPayload>> for UpdateDepositPayload {
    fn into_into_dart(self) -> FrbWrapper<UpdateDepositPayload> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::BindingEventListener {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.listener.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::BindingEventListener {}
impl flutter_rust_bridge::IntoIntoDart<crate::BindingEventListener>
    for crate::BindingEventListener
{
    fn into_into_dart(self) -> crate::BindingEventListener {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::BindingLogger {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.logger.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::BindingLogger {}
impl flutter_rust_bridge::IntoIntoDart<crate::BindingLogger> for crate::BindingLogger {
    fn into_into_dart(self) -> crate::BindingLogger {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::input::Bip21Details> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.amount_sat.into_into_dart().into_dart(),
            self.0.asset_id.into_into_dart().into_dart(),
            self.0.uri.into_into_dart().into_dart(),
            self.0.extras.into_into_dart().into_dart(),
            self.0.label.into_into_dart().into_dart(),
            self.0.message.into_into_dart().into_dart(),
            self.0.payment_methods.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::input::Bip21Details>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::input::Bip21Details>>
    for breez_sdk_common::input::Bip21Details
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::input::Bip21Details> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::input::Bip21Extra> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.key.into_into_dart().into_dart(),
            self.0.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::input::Bip21Extra>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::input::Bip21Extra>>
    for breez_sdk_common::input::Bip21Extra
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::input::Bip21Extra> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::network::BitcoinNetwork> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            breez_sdk_common::network::BitcoinNetwork::Bitcoin => 0.into_dart(),
            breez_sdk_common::network::BitcoinNetwork::Testnet3 => 1.into_dart(),
            breez_sdk_common::network::BitcoinNetwork::Testnet4 => 2.into_dart(),
            breez_sdk_common::network::BitcoinNetwork::Signet => 3.into_dart(),
            breez_sdk_common::network::BitcoinNetwork::Regtest => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::network::BitcoinNetwork>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::network::BitcoinNetwork>>
    for breez_sdk_common::network::BitcoinNetwork
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::network::BitcoinNetwork> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::input::Bolt11Invoice> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.bolt11.into_into_dart().into_dart(),
            self.0.source.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::input::Bolt11Invoice>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::input::Bolt11Invoice>>
    for breez_sdk_common::input::Bolt11Invoice
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::input::Bolt11Invoice> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::input::Bolt11InvoiceDetails> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.amount_msat.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.description_hash.into_into_dart().into_dart(),
            self.0.expiry.into_into_dart().into_dart(),
            self.0.invoice.into_into_dart().into_dart(),
            self.0
                .min_final_cltv_expiry_delta
                .into_into_dart()
                .into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.payee_pubkey.into_into_dart().into_dart(),
            self.0.payment_hash.into_into_dart().into_dart(),
            self.0.payment_secret.into_into_dart().into_dart(),
            self.0.routing_hints.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::input::Bolt11InvoiceDetails>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::input::Bolt11InvoiceDetails>>
    for breez_sdk_common::input::Bolt11InvoiceDetails
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::input::Bolt11InvoiceDetails> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::input::Bolt11RouteHint> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.hops.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::input::Bolt11RouteHint>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::input::Bolt11RouteHint>>
    for breez_sdk_common::input::Bolt11RouteHint
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::input::Bolt11RouteHint> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::input::Bolt11RouteHintHop> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.src_node_id.into_into_dart().into_dart(),
            self.0.short_channel_id.into_into_dart().into_dart(),
            self.0.fees_base_msat.into_into_dart().into_dart(),
            self.0
                .fees_proportional_millionths
                .into_into_dart()
                .into_dart(),
            self.0.cltv_expiry_delta.into_into_dart().into_dart(),
            self.0.htlc_minimum_msat.into_into_dart().into_dart(),
            self.0.htlc_maximum_msat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::input::Bolt11RouteHintHop>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::input::Bolt11RouteHintHop>>
    for breez_sdk_common::input::Bolt11RouteHintHop
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::input::Bolt11RouteHintHop> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::ClaimDepositRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.txid.into_into_dart().into_dart(),
            self.0.vout.into_into_dart().into_dart(),
            self.0.max_fee.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ClaimDepositRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::ClaimDepositRequest>>
    for breez_sdk_spark::models::ClaimDepositRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ClaimDepositRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::ClaimDepositResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.payment.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ClaimDepositResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::ClaimDepositResponse>>
    for breez_sdk_spark::models::ClaimDepositResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ClaimDepositResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::Config> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.api_key.into_into_dart().into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.sync_interval_secs.into_into_dart().into_dart(),
            self.0.max_deposit_claim_fee.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::Config>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::Config>>
    for breez_sdk_spark::models::Config
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::Config> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::ConnectRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.config.into_into_dart().into_dart(),
            self.0.mnemonic.into_into_dart().into_dart(),
            self.0.storage_dir.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ConnectRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::ConnectRequest>>
    for breez_sdk_spark::models::ConnectRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ConnectRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::DepositInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.txid.into_into_dart().into_dart(),
            self.0.vout.into_into_dart().into_dart(),
            self.0.amount_sats.into_into_dart().into_dart(),
            self.0.refund_tx.into_into_dart().into_dart(),
            self.0.refund_tx_id.into_into_dart().into_dart(),
            self.0.claim_error.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::DepositInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::DepositInfo>>
    for breez_sdk_spark::models::DepositInfo
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::DepositInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::frb_generated::EventListenerImplementor {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::frb_generated::EventListenerImplementor::Variant0(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::frb_generated::EventListenerImplementor
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::EventListenerImplementor>
    for crate::frb_generated::EventListenerImplementor
{
    fn into_into_dart(self) -> crate::frb_generated::EventListenerImplementor {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::GetInfoRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::GetInfoRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::GetInfoRequest>>
    for breez_sdk_spark::models::GetInfoRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::GetInfoRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::GetInfoResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.balance_sats.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::GetInfoResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::GetInfoResponse>>
    for breez_sdk_spark::models::GetInfoResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::GetInfoResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::GetPaymentRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.payment_id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::GetPaymentRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::GetPaymentRequest>>
    for breez_sdk_spark::models::GetPaymentRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::GetPaymentRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::GetPaymentResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.payment.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::GetPaymentResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::GetPaymentResponse>>
    for breez_sdk_spark::models::GetPaymentResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::GetPaymentResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::ListPaymentsRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.offset.into_into_dart().into_dart(),
            self.0.limit.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ListPaymentsRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::ListPaymentsRequest>>
    for breez_sdk_spark::models::ListPaymentsRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ListPaymentsRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::ListPaymentsResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.payments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ListPaymentsResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::ListPaymentsResponse>>
    for breez_sdk_spark::models::ListPaymentsResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ListPaymentsResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsRequest>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsRequest>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsRequest>,
    > for breez_sdk_spark::models::ListUnclaimedDepositsRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsResponse>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.deposits.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsResponse>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsResponse>,
    > for breez_sdk_spark::models::ListUnclaimedDepositsResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ListUnclaimedDepositsResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::LnurlPayInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.ln_address.into_into_dart().into_dart(),
            self.0.comment.into_into_dart().into_dart(),
            self.0.domain.into_into_dart().into_dart(),
            self.0.metadata.into_into_dart().into_dart(),
            self.0.processed_success_action.into_into_dart().into_dart(),
            self.0.raw_success_action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::LnurlPayInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::LnurlPayInfo>>
    for breez_sdk_spark::models::LnurlPayInfo
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::LnurlPayInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::LnurlPayRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.prepare_response.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::LnurlPayRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::LnurlPayRequest>>
    for breez_sdk_spark::models::LnurlPayRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::LnurlPayRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.callback.into_into_dart().into_dart(),
            self.0.min_sendable.into_into_dart().into_dart(),
            self.0.max_sendable.into_into_dart().into_dart(),
            self.0.metadata_str.into_into_dart().into_dart(),
            self.0.comment_allowed.into_into_dart().into_dart(),
            self.0.domain.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.address.into_into_dart().into_dart(),
            self.0.allows_nostr.into_into_dart().into_dart(),
            self.0.nostr_pubkey.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>,
    > for breez_sdk_common::lnurl::pay::LnurlPayRequestDetails
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::lnurl::pay::LnurlPayRequestDetails> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::LnurlPayResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment.into_into_dart().into_dart(),
            self.0.success_action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::LnurlPayResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::LnurlPayResponse>>
    for breez_sdk_spark::models::LnurlPayResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::LnurlPayResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::LogEntry> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.line.into_into_dart().into_dart(),
            self.0.level.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::LogEntry>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::LogEntry>>
    for breez_sdk_spark::models::LogEntry
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::LogEntry> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::frb_generated::LoggerImplementor {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::frb_generated::LoggerImplementor::Variant0(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::frb_generated::LoggerImplementor
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::LoggerImplementor>
    for crate::frb_generated::LoggerImplementor
{
    fn into_into_dart(self) -> crate::frb_generated::LoggerImplementor {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::Network> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            breez_sdk_spark::models::Network::Mainnet => 0.into_dart(),
            breez_sdk_spark::models::Network::Regtest => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::Network>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::Network>>
    for breez_sdk_spark::models::Network
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::Network> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::Payment> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.payment_type.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
            self.0.fees.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
            self.0.method.into_into_dart().into_dart(),
            self.0.details.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::Payment>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::Payment>>
    for breez_sdk_spark::models::Payment
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::Payment> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::persist::PaymentMetadata> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.lnurl_pay_info.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::persist::PaymentMetadata>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::persist::PaymentMetadata>>
    for breez_sdk_spark::persist::PaymentMetadata
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::persist::PaymentMetadata> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::PaymentMethod> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            breez_sdk_spark::models::PaymentMethod::Lightning => 0.into_dart(),
            breez_sdk_spark::models::PaymentMethod::Spark => 1.into_dart(),
            breez_sdk_spark::models::PaymentMethod::Deposit => 2.into_dart(),
            breez_sdk_spark::models::PaymentMethod::Withdraw => 3.into_dart(),
            breez_sdk_spark::models::PaymentMethod::Unknown => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::PaymentMethod>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::PaymentMethod>>
    for breez_sdk_spark::models::PaymentMethod
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::PaymentMethod> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_common::input::PaymentRequestSource> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.bip_21_uri.into_into_dart().into_dart(),
            self.0.bip_353_address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_common::input::PaymentRequestSource>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_common::input::PaymentRequestSource>>
    for breez_sdk_common::input::PaymentRequestSource
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_common::input::PaymentRequestSource> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::PaymentStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            breez_sdk_spark::models::PaymentStatus::Completed => 0.into_dart(),
            breez_sdk_spark::models::PaymentStatus::Pending => 1.into_dart(),
            breez_sdk_spark::models::PaymentStatus::Failed => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::PaymentStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::PaymentStatus>>
    for breez_sdk_spark::models::PaymentStatus
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::PaymentStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::PaymentType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            breez_sdk_spark::models::PaymentType::Send => 0.into_dart(),
            breez_sdk_spark::models::PaymentType::Receive => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::PaymentType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::PaymentType>>
    for breez_sdk_spark::models::PaymentType
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::PaymentType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.amount_sats.into_into_dart().into_dart(),
            self.0.pay_request.into_into_dart().into_dart(),
            self.0.comment.into_into_dart().into_dart(),
            self.0
                .validate_success_action_url
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayRequest>>
    for breez_sdk_spark::models::PrepareLnurlPayRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayResponse>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.amount_sats.into_into_dart().into_dart(),
            self.0.comment.into_into_dart().into_dart(),
            self.0.pay_request.into_into_dart().into_dart(),
            self.0.fee_sats.into_into_dart().into_dart(),
            self.0.invoice_details.into_into_dart().into_dart(),
            self.0.success_action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayResponse>>
    for breez_sdk_spark::models::PrepareLnurlPayResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::PrepareLnurlPayResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<breez_sdk_spark::models::PrepareSendPaymentRequest>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment_request.into_into_dart().into_dart(),
            self.0.amount_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::PrepareSendPaymentRequest>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<breez_sdk_spark::models::PrepareSendPaymentRequest>,
    > for breez_sdk_spark::models::PrepareSendPaymentRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::PrepareSendPaymentRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::ReceivePaymentResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment_request.into_into_dart().into_dart(),
            self.0.fee_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::ReceivePaymentResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::ReceivePaymentResponse>>
    for breez_sdk_spark::models::ReceivePaymentResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::ReceivePaymentResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::RefundDepositResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.tx_id.into_into_dart().into_dart(),
            self.0.tx_hex.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::RefundDepositResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::RefundDepositResponse>>
    for breez_sdk_spark::models::RefundDepositResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::RefundDepositResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::frb_generated::RestClientImplementor {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::frb_generated::RestClientImplementor::Variant0(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::frb_generated::RestClientImplementor
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::frb_generated::RestClientImplementor>
    for crate::frb_generated::RestClientImplementor
{
    fn into_into_dart(self) -> crate::frb_generated::RestClientImplementor {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.user_fee_sat.into_into_dart().into_dart(),
            self.0.l1_broadcast_fee_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>>
    for breez_sdk_spark::models::SendOnchainSpeedFeeQuote
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::SendOnchainSpeedFeeQuote> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::SendPaymentResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.payment.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::SendPaymentResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::SendPaymentResponse>>
    for breez_sdk_spark::models::SendPaymentResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::SendPaymentResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::SyncWalletRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::SyncWalletRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::SyncWalletRequest>>
    for breez_sdk_spark::models::SyncWalletRequest
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::SyncWalletRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<breez_sdk_spark::models::SyncWalletResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<breez_sdk_spark::models::SyncWalletResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<breez_sdk_spark::models::SyncWalletResponse>>
    for breez_sdk_spark::models::SyncWalletResponse
{
    fn into_into_dart(self) -> FrbWrapper<breez_sdk_spark::models::SyncWalletResponse> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<BindingEventListener> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingEventListener>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self),
            serializer,
        );
    }
}

impl SseEncode for RustAutoOpaqueNom<BindingLogger> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< BindingLogger>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<ReqwestRestClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for Arc<dyn Storage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < dyn Storage >>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for BasicAuth {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for BreezSdk {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for BreezServer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for DepositClaimError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for EventEmitter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for Fee {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>>>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ParseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for PaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode
    for ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait,
                    >,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<
        Box<Future<Output = Result<RestResponse, ServiceConnectivityError>> + Send + 'async_trait>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<RestResponse, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<DepositInfo>, StorageError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<
        Box<
            Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                + Send
                + 'async_trait,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<
        Box<Future<Output = Result<Vec<Rate>, ServiceConnectivityError>> + Send + 'async_trait>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode
    for ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait,
                    >,
                >,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for PrepareSendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for ReceivePaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for ReceivePaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for RefundDepositRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for ReqwestRestClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for RestClientChainService {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for SdkBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SdkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SendPaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SendPaymentOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ServiceConnectivityError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for SqliteStorage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for StorageError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SuccessAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for UpdateDepositPayload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<dyn Storage>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingEventListener>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLogger>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Path>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<
                    Future<Output = Result<RestResponse, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for StreamSink<SdkEvent, flutter_rust_bridge::for_generated::DcoCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<breez_sdk_spark::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::BindingEventListener {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <StreamSink<SdkEvent, flutter_rust_bridge::for_generated::DcoCodec>>::sse_encode(
            self.listener,
            serializer,
        );
    }
}

impl SseEncode for crate::BindingLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <StreamSink<breez_sdk_spark::models::LogEntry,flutter_rust_bridge::for_generated::DcoCodec>>::sse_encode(self.logger, serializer);
    }
}

impl SseEncode for breez_sdk_common::input::Bip21Details {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <Option<String>>::sse_encode(self.asset_id, serializer);
        <String>::sse_encode(self.uri, serializer);
        <Vec<breez_sdk_common::input::Bip21Extra>>::sse_encode(self.extras, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.message, serializer);
        <Vec<InputType>>::sse_encode(self.payment_methods, serializer);
    }
}

impl SseEncode for breez_sdk_common::input::Bip21Extra {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for breez_sdk_common::network::BitcoinNetwork {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                breez_sdk_common::network::BitcoinNetwork::Bitcoin => 0,
                breez_sdk_common::network::BitcoinNetwork::Testnet3 => 1,
                breez_sdk_common::network::BitcoinNetwork::Testnet4 => 2,
                breez_sdk_common::network::BitcoinNetwork::Signet => 3,
                breez_sdk_common::network::BitcoinNetwork::Regtest => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for breez_sdk_common::input::Bolt11Invoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bolt11, serializer);
        <breez_sdk_common::input::PaymentRequestSource>::sse_encode(self.source, serializer);
    }
}

impl SseEncode for breez_sdk_common::input::Bolt11InvoiceDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u64>>::sse_encode(self.amount_msat, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<String>>::sse_encode(self.description_hash, serializer);
        <u64>::sse_encode(self.expiry, serializer);
        <breez_sdk_common::input::Bolt11Invoice>::sse_encode(self.invoice, serializer);
        <u64>::sse_encode(self.min_final_cltv_expiry_delta, serializer);
        <breez_sdk_common::network::BitcoinNetwork>::sse_encode(self.network, serializer);
        <String>::sse_encode(self.payee_pubkey, serializer);
        <String>::sse_encode(self.payment_hash, serializer);
        <String>::sse_encode(self.payment_secret, serializer);
        <Vec<breez_sdk_common::input::Bolt11RouteHint>>::sse_encode(self.routing_hints, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
    }
}

impl SseEncode for breez_sdk_common::input::Bolt11RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<breez_sdk_common::input::Bolt11RouteHintHop>>::sse_encode(self.hops, serializer);
    }
}

impl SseEncode for breez_sdk_common::input::Bolt11RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.src_node_id, serializer);
        <String>::sse_encode(self.short_channel_id, serializer);
        <u32>::sse_encode(self.fees_base_msat, serializer);
        <u32>::sse_encode(self.fees_proportional_millionths, serializer);
        <u16>::sse_encode(self.cltv_expiry_delta, serializer);
        <Option<u64>>::sse_encode(self.htlc_minimum_msat, serializer);
        <Option<u64>>::sse_encode(self.htlc_maximum_msat, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for Box<dyn EventListener> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dyn EventListener>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<dyn Logger> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dyn Logger>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<dyn RestClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <dyn RestClient>::sse_encode(*self, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::ClaimDepositRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.txid, serializer);
        <u32>::sse_encode(self.vout, serializer);
        <Option<Fee>>::sse_encode(self.max_fee, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::ClaimDepositResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <breez_sdk_spark::models::Payment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.api_key, serializer);
        <breez_sdk_spark::models::Network>::sse_encode(self.network, serializer);
        <u32>::sse_encode(self.sync_interval_secs, serializer);
        <Option<Fee>>::sse_encode(self.max_deposit_claim_fee, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <breez_sdk_spark::models::Config>::sse_encode(self.config, serializer);
        <String>::sse_encode(self.mnemonic, serializer);
        <String>::sse_encode(self.storage_dir, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::DepositInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.txid, serializer);
        <u32>::sse_encode(self.vout, serializer);
        <u64>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.refund_tx, serializer);
        <Option<String>>::sse_encode(self.refund_tx_id, serializer);
        <Option<DepositClaimError>>::sse_encode(self.claim_error, serializer);
    }
}

impl SseEncode for crate::frb_generated::EventListenerImplementor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::frb_generated::EventListenerImplementor::Variant0(field0) => {
                <i32>::sse_encode(0, serializer);
                <RustAutoOpaqueNom<BindingEventListener>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for breez_sdk_spark::models::GetInfoRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for breez_sdk_spark::models::GetInfoResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.balance_sats, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::GetPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_id, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::GetPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <breez_sdk_spark::models::Payment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<InputType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <InputType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<breez_sdk_common::input::Bip21Extra> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <breez_sdk_common::input::Bip21Extra>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<breez_sdk_common::input::Bolt11RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <breez_sdk_common::input::Bolt11RouteHint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<breez_sdk_common::input::Bolt11RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <breez_sdk_common::input::Bolt11RouteHintHop>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<breez_sdk_spark::models::DepositInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <breez_sdk_spark::models::DepositInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<breez_sdk_spark::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <breez_sdk_spark::models::Payment>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for breez_sdk_spark::models::ListPaymentsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.offset, serializer);
        <Option<u32>>::sse_encode(self.limit, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::ListPaymentsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<breez_sdk_spark::models::Payment>>::sse_encode(self.payments, serializer);
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for breez_sdk_spark::models::ListUnclaimedDepositsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for breez_sdk_spark::models::ListUnclaimedDepositsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<breez_sdk_spark::models::DepositInfo>>::sse_encode(self.deposits, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::LnurlPayInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.ln_address, serializer);
        <Option<String>>::sse_encode(self.comment, serializer);
        <Option<String>>::sse_encode(self.domain, serializer);
        <Option<String>>::sse_encode(self.metadata, serializer);
        <Option<SuccessActionProcessed>>::sse_encode(self.processed_success_action, serializer);
        <Option<SuccessAction>>::sse_encode(self.raw_success_action, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::LnurlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <breez_sdk_spark::models::PrepareLnurlPayResponse>::sse_encode(
            self.prepare_response,
            serializer,
        );
    }
}

impl SseEncode for breez_sdk_common::lnurl::pay::LnurlPayRequestDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.callback, serializer);
        <u64>::sse_encode(self.min_sendable, serializer);
        <u64>::sse_encode(self.max_sendable, serializer);
        <String>::sse_encode(self.metadata_str, serializer);
        <u16>::sse_encode(self.comment_allowed, serializer);
        <String>::sse_encode(self.domain, serializer);
        <String>::sse_encode(self.url, serializer);
        <Option<String>>::sse_encode(self.address, serializer);
        <bool>::sse_encode(self.allows_nostr, serializer);
        <Option<String>>::sse_encode(self.nostr_pubkey, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::LnurlPayResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <breez_sdk_spark::models::Payment>::sse_encode(self.payment, serializer);
        <Option<SuccessActionProcessed>>::sse_encode(self.success_action, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.line, serializer);
        <String>::sse_encode(self.level, serializer);
    }
}

impl SseEncode for crate::frb_generated::LoggerImplementor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::frb_generated::LoggerImplementor::Variant0(field0) => {
                <i32>::sse_encode(0, serializer);
                <RustAutoOpaqueNom<BindingLogger>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for breez_sdk_spark::models::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                breez_sdk_spark::models::Network::Mainnet => 0,
                breez_sdk_spark::models::Network::Regtest => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<std::collections::HashMap<String, String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <std::collections::HashMap<String, String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<dyn Logger>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<dyn Logger>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<BasicAuth> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <BasicAuth>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<DepositClaimError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <DepositClaimError>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Fee> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Fee>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<PaymentDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <PaymentDetails>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<SendPaymentOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <SendPaymentOptions>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<SuccessAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <SuccessAction>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <SuccessActionProcessed>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<breez_sdk_common::input::Bolt11InvoiceDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <breez_sdk_common::input::Bolt11InvoiceDetails>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<breez_sdk_spark::models::LnurlPayInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <breez_sdk_spark::models::LnurlPayInfo>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for breez_sdk_spark::models::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <breez_sdk_spark::models::PaymentType>::sse_encode(self.payment_type, serializer);
        <breez_sdk_spark::models::PaymentStatus>::sse_encode(self.status, serializer);
        <u64>::sse_encode(self.amount, serializer);
        <u64>::sse_encode(self.fees, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
        <breez_sdk_spark::models::PaymentMethod>::sse_encode(self.method, serializer);
        <Option<PaymentDetails>>::sse_encode(self.details, serializer);
    }
}

impl SseEncode for breez_sdk_spark::persist::PaymentMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<breez_sdk_spark::models::LnurlPayInfo>>::sse_encode(
            self.lnurl_pay_info,
            serializer,
        );
    }
}

impl SseEncode for breez_sdk_spark::models::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                breez_sdk_spark::models::PaymentMethod::Lightning => 0,
                breez_sdk_spark::models::PaymentMethod::Spark => 1,
                breez_sdk_spark::models::PaymentMethod::Deposit => 2,
                breez_sdk_spark::models::PaymentMethod::Withdraw => 3,
                breez_sdk_spark::models::PaymentMethod::Unknown => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for breez_sdk_common::input::PaymentRequestSource {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.bip_21_uri, serializer);
        <Option<String>>::sse_encode(self.bip_353_address, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                breez_sdk_spark::models::PaymentStatus::Completed => 0,
                breez_sdk_spark::models::PaymentStatus::Pending => 1,
                breez_sdk_spark::models::PaymentStatus::Failed => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for breez_sdk_spark::models::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                breez_sdk_spark::models::PaymentType::Send => 0,
                breez_sdk_spark::models::PaymentType::Receive => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for breez_sdk_spark::models::PrepareLnurlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.amount_sats, serializer);
        <breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>::sse_encode(
            self.pay_request,
            serializer,
        );
        <Option<String>>::sse_encode(self.comment, serializer);
        <Option<bool>>::sse_encode(self.validate_success_action_url, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::PrepareLnurlPayResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.comment, serializer);
        <breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>::sse_encode(
            self.pay_request,
            serializer,
        );
        <u64>::sse_encode(self.fee_sats, serializer);
        <breez_sdk_common::input::Bolt11InvoiceDetails>::sse_encode(
            self.invoice_details,
            serializer,
        );
        <Option<SuccessAction>>::sse_encode(self.success_action, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::PrepareSendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_request, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_request, serializer);
        <u64>::sse_encode(self.fee_sats, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::RefundDepositResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.tx_id, serializer);
        <String>::sse_encode(self.tx_hex, serializer);
    }
}

impl SseEncode for crate::frb_generated::RestClientImplementor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::frb_generated::RestClientImplementor::Variant0(field0) => {
                <i32>::sse_encode(0, serializer);
                <RustAutoOpaqueNom<ReqwestRestClient>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for breez_sdk_spark::models::SendOnchainSpeedFeeQuote {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.user_fee_sat, serializer);
        <u64>::sse_encode(self.l1_broadcast_fee_sat, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <breez_sdk_spark::models::Payment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for breez_sdk_spark::models::SyncWalletRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for breez_sdk_spark::models::SyncWalletResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use crate::BreezSdkExt;
    use crate::*;
    use breez_sdk_common::breez_server::*;
    use breez_sdk_common::error::*;
    use breez_sdk_common::fiat::FiatAPI;
    use breez_sdk_common::fiat::*;
    use breez_sdk_common::input::*;
    use breez_sdk_common::lnurl::pay::*;
    use breez_sdk_common::rest::rest_client::RestClient;
    use breez_sdk_common::rest::rest_client::*;
    use breez_sdk_spark::chain::rest_client::*;
    use breez_sdk_spark::chain::BitcoinChainService;
    use breez_sdk_spark::chain::*;
    use breez_sdk_spark::models::Logger;
    use breez_sdk_spark::models::*;
    use breez_sdk_spark::persist::sqlite::*;
    use breez_sdk_spark::persist::Storage;
    use breez_sdk_spark::persist::*;
    use breez_sdk_spark::EventListener;
    use breez_sdk_spark::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    use std::path::Path;
    use std::pin::Pin;

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<RustAutoOpaqueNom<BindingEventListener>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<BindingEventListener> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<BindingLogger>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<BindingLogger> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<ReqwestRestClient>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<ReqwestRestClient> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<Arc<dyn Storage>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Arc<dyn Storage> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<dyn Storage>>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<BasicAuth> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BasicAuth {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<BreezSdk> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BreezSdk {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<BreezServer> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BreezServer {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<DepositClaimError> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> DepositClaimError {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<EventEmitter> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> EventEmitter {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<Fee> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Fee {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<InputType> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> InputType {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ParseError> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ParseError {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<PaymentDetails> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PaymentDetails {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>
        {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<(), ChainServiceError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait>>
        {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<Option<String>, StorageError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>
        {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<Payment, StorageError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<
                Box<
                    Future<Output = Result<RestResponse, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<
            Box<
                Future<Output = Result<RestResponse, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        > {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<RestResponse, ServiceConnectivityError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>>
        {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<String, ChainServiceError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<
                Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<Vec<DepositInfo>, StorageError>> + Send + 'async_trait>>
        {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<Vec<DepositInfo>, StorageError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<
            Box<
                Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                    + Send
                    + 'async_trait,
            >,
        > {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<
                                        Output = Result<
                                            Vec<FiatCurrency>,
                                            ServiceConnectivityError,
                                        >,
                                    > + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>>
        {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<Vec<Payment>, StorageError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<
                Box<
                    Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                        + Send
                        + 'async_trait,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<
            Box<Future<Output = Result<Vec<Rate>, ServiceConnectivityError>> + Send + 'async_trait>,
        > {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> ::Pin<Box<Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait>>
        {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ::Pin<
                            Box<
                                Future<Output = Result<Vec<Utxo>, ChainServiceError>>
                                    + Send
                                    + 'async_trait,
                            >,
                        >,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<PrepareSendPaymentResponse> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PrepareSendPaymentResponse {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        PrepareSendPaymentResponse,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ReceivePaymentMethod> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ReceivePaymentMethod {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ReceivePaymentRequest> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ReceivePaymentRequest {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<RefundDepositRequest> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RefundDepositRequest {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ReqwestRestClient> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ReqwestRestClient {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<RestClientChainService> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RestClientChainService {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SdkBuilder> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SdkBuilder {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SdkError> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SdkError {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SdkEvent> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SdkEvent {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SendPaymentMethod> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SendPaymentMethod {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SendPaymentOptions> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SendPaymentOptions {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SendPaymentRequest> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SendPaymentRequest {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ServiceConnectivityError> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ServiceConnectivityError {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                        ServiceConnectivityError,
                    >,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SqliteStorage> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SqliteStorage {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<StorageError> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> StorageError {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SuccessAction> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SuccessAction {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SuccessActionProcessed> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SuccessActionProcessed {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<UpdateDepositPayload> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> UpdateDepositPayload {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<dyn EventListener> for wire_cst_event_listener_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dyn EventListener {
            unimplemented!()
        }
    }
    impl CstDecode<dyn Logger> for wire_cst_logger_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dyn Logger {
            unimplemented!()
        }
    }
    impl CstDecode<dyn RestClient> for wire_cst_rest_client_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> dyn RestClient {
            unimplemented!()
        }
    }
    impl CstDecode<std::collections::HashMap<String, String>>
        for *mut wire_cst_list_record_string_string
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<String, String> {
            let vec: Vec<(String, String)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<dyn Storage>>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<dyn Storage>>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingEventListener>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingEventListener>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLogger>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLogger>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Path>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Path>> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>>,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Option<String>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Option<String>, StorageError>> + Send + 'async_trait,
                    >,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>>,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<RestResponse, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<RestResponse, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<String, ChainServiceError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<Future<Output = Result<String, ChainServiceError>> + Send + 'async_trait>,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<DepositInfo>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<DepositInfo>, StorageError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Payment>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<Future<Output = Result<Vec<Payment>, StorageError>> + Send + 'async_trait>,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                            + Send
                            + 'async_trait,
                    >,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Utxo>, ChainServiceError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                ::Pin<
                    Box<
                        Future<Output = Result<Vec<Utxo>, ChainServiceError>> + Send + 'async_trait,
                    >,
                >,
            >,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<StreamSink<SdkEvent, flutter_rust_bridge::for_generated::DcoCodec>>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> StreamSink<SdkEvent, flutter_rust_bridge::for_generated::DcoCodec> {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl
        CstDecode<
            StreamSink<
                breez_sdk_spark::models::LogEntry,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            breez_sdk_spark::models::LogEntry,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<crate::BindingEventListener> for wire_cst_binding_event_listener {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::BindingEventListener {
            crate::BindingEventListener {
                listener: self.listener.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::BindingLogger> for wire_cst_binding_logger {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::BindingLogger {
            crate::BindingLogger {
                logger: self.logger.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::input::Bip21Details> for wire_cst_bip_21_details {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::Bip21Details {
            breez_sdk_common::input::Bip21Details {
                amount_sat: self.amount_sat.cst_decode(),
                asset_id: self.asset_id.cst_decode(),
                uri: self.uri.cst_decode(),
                extras: self.extras.cst_decode(),
                label: self.label.cst_decode(),
                message: self.message.cst_decode(),
                payment_methods: self.payment_methods.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::input::Bip21Extra> for wire_cst_bip_21_extra {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::Bip21Extra {
            breez_sdk_common::input::Bip21Extra {
                key: self.key.cst_decode(),
                value: self.value.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::input::Bolt11Invoice> for wire_cst_bolt_11_invoice {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::Bolt11Invoice {
            breez_sdk_common::input::Bolt11Invoice {
                bolt11: self.bolt11.cst_decode(),
                source: self.source.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::input::Bolt11InvoiceDetails> for wire_cst_bolt_11_invoice_details {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::Bolt11InvoiceDetails {
            breez_sdk_common::input::Bolt11InvoiceDetails {
                amount_msat: self.amount_msat.cst_decode(),
                description: self.description.cst_decode(),
                description_hash: self.description_hash.cst_decode(),
                expiry: self.expiry.cst_decode(),
                invoice: self.invoice.cst_decode(),
                min_final_cltv_expiry_delta: self.min_final_cltv_expiry_delta.cst_decode(),
                network: self.network.cst_decode(),
                payee_pubkey: self.payee_pubkey.cst_decode(),
                payment_hash: self.payment_hash.cst_decode(),
                payment_secret: self.payment_secret.cst_decode(),
                routing_hints: self.routing_hints.cst_decode(),
                timestamp: self.timestamp.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::input::Bolt11RouteHint> for wire_cst_bolt_11_route_hint {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::Bolt11RouteHint {
            breez_sdk_common::input::Bolt11RouteHint {
                hops: self.hops.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::input::Bolt11RouteHintHop> for wire_cst_bolt_11_route_hint_hop {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::Bolt11RouteHintHop {
            breez_sdk_common::input::Bolt11RouteHintHop {
                src_node_id: self.src_node_id.cst_decode(),
                short_channel_id: self.short_channel_id.cst_decode(),
                fees_base_msat: self.fees_base_msat.cst_decode(),
                fees_proportional_millionths: self.fees_proportional_millionths.cst_decode(),
                cltv_expiry_delta: self.cltv_expiry_delta.cst_decode(),
                htlc_minimum_msat: self.htlc_minimum_msat.cst_decode(),
                htlc_maximum_msat: self.htlc_maximum_msat.cst_decode(),
            }
        }
    }
    impl CstDecode<Box<dyn EventListener>> for *mut wire_cst_event_listener_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Box<dyn EventListener> {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dyn EventListener>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<Box<dyn Logger>> for *mut wire_cst_logger_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Box<dyn Logger> {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dyn Logger>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<Box<dyn RestClient>> for *mut wire_cst_rest_client_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Box<dyn RestClient> {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<dyn RestClient>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<BasicAuth> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BasicAuth {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<BasicAuth>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<DepositClaimError> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> DepositClaimError {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<DepositClaimError>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<Fee> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Fee {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<Fee>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<PaymentDetails> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> PaymentDetails {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<PaymentDetails>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<SendPaymentOptions> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SendPaymentOptions {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<SendPaymentOptions>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<SuccessAction> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SuccessAction {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<SuccessAction>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<SuccessActionProcessed> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SuccessActionProcessed {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<SuccessActionProcessed>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::BindingEventListener> for *mut wire_cst_binding_event_listener {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::BindingEventListener {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::BindingEventListener>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::BindingLogger> for *mut wire_cst_binding_logger {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::BindingLogger {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::BindingLogger>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_common::input::Bolt11InvoiceDetails>
        for *mut wire_cst_bolt_11_invoice_details
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::Bolt11InvoiceDetails {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_common::input::Bolt11InvoiceDetails>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<bool> for *mut bool {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<breez_sdk_spark::models::ClaimDepositRequest>
        for *mut wire_cst_claim_deposit_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ClaimDepositRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::ClaimDepositRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::Config> for *mut wire_cst_config {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::Config {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::Config>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::ConnectRequest> for *mut wire_cst_connect_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ConnectRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::ConnectRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::frb_generated::EventListenerImplementor>
        for *mut wire_cst_event_listener_implementor
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::frb_generated::EventListenerImplementor {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::frb_generated::EventListenerImplementor>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::GetInfoRequest> for *mut wire_cst_get_info_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::GetInfoRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::GetInfoRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::GetPaymentRequest> for *mut wire_cst_get_payment_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::GetPaymentRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::GetPaymentRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::ListPaymentsRequest>
        for *mut wire_cst_list_payments_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ListPaymentsRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::ListPaymentsRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::ListUnclaimedDepositsRequest>
        for *mut wire_cst_list_unclaimed_deposits_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ListUnclaimedDepositsRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::ListUnclaimedDepositsRequest>::cst_decode(*wrap)
                .into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::LnurlPayInfo> for *mut wire_cst_lnurl_pay_info {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::LnurlPayInfo {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::LnurlPayInfo>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::LnurlPayRequest> for *mut wire_cst_lnurl_pay_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::LnurlPayRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::LnurlPayRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::LogEntry> for *mut wire_cst_log_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::LogEntry {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::LogEntry>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::frb_generated::LoggerImplementor> for *mut wire_cst_logger_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::frb_generated::LoggerImplementor {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::frb_generated::LoggerImplementor>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::Payment> for *mut wire_cst_payment {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::Payment {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::Payment>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::persist::PaymentMetadata> for *mut wire_cst_payment_metadata {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::persist::PaymentMetadata {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::persist::PaymentMetadata>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::PrepareLnurlPayRequest>
        for *mut wire_cst_prepare_lnurl_pay_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::PrepareLnurlPayRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::PrepareLnurlPayRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::PrepareSendPaymentRequest>
        for *mut wire_cst_prepare_send_payment_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::PrepareSendPaymentRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::PrepareSendPaymentRequest>::cst_decode(*wrap)
                .into()
        }
    }
    impl CstDecode<crate::frb_generated::RestClientImplementor>
        for *mut wire_cst_rest_client_implementor
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::frb_generated::RestClientImplementor {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::frb_generated::RestClientImplementor>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>
        for *mut wire_cst_send_onchain_speed_fee_quote
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::SendOnchainSpeedFeeQuote {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<breez_sdk_spark::models::SyncWalletRequest> for *mut wire_cst_sync_wallet_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::SyncWalletRequest {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<breez_sdk_spark::models::SyncWalletRequest>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<u32> for *mut u32 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u32 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<u64> for *mut u64 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u64 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<breez_sdk_spark::models::ClaimDepositRequest> for wire_cst_claim_deposit_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ClaimDepositRequest {
            breez_sdk_spark::models::ClaimDepositRequest {
                txid: self.txid.cst_decode(),
                vout: self.vout.cst_decode(),
                max_fee: self.max_fee.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::ClaimDepositResponse> for wire_cst_claim_deposit_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ClaimDepositResponse {
            breez_sdk_spark::models::ClaimDepositResponse {
                payment: self.payment.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::Config> for wire_cst_config {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::Config {
            breez_sdk_spark::models::Config {
                api_key: self.api_key.cst_decode(),
                network: self.network.cst_decode(),
                sync_interval_secs: self.sync_interval_secs.cst_decode(),
                max_deposit_claim_fee: self.max_deposit_claim_fee.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::ConnectRequest> for wire_cst_connect_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ConnectRequest {
            breez_sdk_spark::models::ConnectRequest {
                config: self.config.cst_decode(),
                mnemonic: self.mnemonic.cst_decode(),
                storage_dir: self.storage_dir.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::DepositInfo> for wire_cst_deposit_info {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::DepositInfo {
            breez_sdk_spark::models::DepositInfo {
                txid: self.txid.cst_decode(),
                vout: self.vout.cst_decode(),
                amount_sats: self.amount_sats.cst_decode(),
                refund_tx: self.refund_tx.cst_decode(),
                refund_tx_id: self.refund_tx_id.cst_decode(),
                claim_error: self.claim_error.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::frb_generated::EventListenerImplementor>
        for wire_cst_event_listener_implementor
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::frb_generated::EventListenerImplementor {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.Variant0 };
                    crate::frb_generated::EventListenerImplementor::Variant0(
                        ans.field0.cst_decode(),
                    )
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::GetInfoRequest> for wire_cst_get_info_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::GetInfoRequest {
            breez_sdk_spark::models::GetInfoRequest {}
        }
    }
    impl CstDecode<breez_sdk_spark::models::GetInfoResponse> for wire_cst_get_info_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::GetInfoResponse {
            breez_sdk_spark::models::GetInfoResponse {
                balance_sats: self.balance_sats.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::GetPaymentRequest> for wire_cst_get_payment_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::GetPaymentRequest {
            breez_sdk_spark::models::GetPaymentRequest {
                payment_id: self.payment_id.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::GetPaymentResponse> for wire_cst_get_payment_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::GetPaymentResponse {
            breez_sdk_spark::models::GetPaymentResponse {
                payment: self.payment.cst_decode(),
            }
        }
    }
    impl CstDecode<Vec<InputType>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<InputType> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
    impl CstDecode<Vec<breez_sdk_common::input::Bip21Extra>> for *mut wire_cst_list_bip_21_extra {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<breez_sdk_common::input::Bip21Extra> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<breez_sdk_common::input::Bolt11RouteHint>>
        for *mut wire_cst_list_bolt_11_route_hint
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<breez_sdk_common::input::Bolt11RouteHint> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<breez_sdk_common::input::Bolt11RouteHintHop>>
        for *mut wire_cst_list_bolt_11_route_hint_hop
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<breez_sdk_common::input::Bolt11RouteHintHop> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<breez_sdk_spark::models::DepositInfo>> for *mut wire_cst_list_deposit_info {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<breez_sdk_spark::models::DepositInfo> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<breez_sdk_spark::models::Payment>> for *mut wire_cst_list_payment {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<breez_sdk_spark::models::Payment> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<breez_sdk_spark::models::ListPaymentsRequest> for wire_cst_list_payments_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ListPaymentsRequest {
            breez_sdk_spark::models::ListPaymentsRequest {
                offset: self.offset.cst_decode(),
                limit: self.limit.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::ListPaymentsResponse> for wire_cst_list_payments_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ListPaymentsResponse {
            breez_sdk_spark::models::ListPaymentsResponse {
                payments: self.payments.cst_decode(),
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(String, String)> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<breez_sdk_spark::models::ListUnclaimedDepositsRequest>
        for wire_cst_list_unclaimed_deposits_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ListUnclaimedDepositsRequest {
            breez_sdk_spark::models::ListUnclaimedDepositsRequest {}
        }
    }
    impl CstDecode<breez_sdk_spark::models::ListUnclaimedDepositsResponse>
        for wire_cst_list_unclaimed_deposits_response
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ListUnclaimedDepositsResponse {
            breez_sdk_spark::models::ListUnclaimedDepositsResponse {
                deposits: self.deposits.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::LnurlPayInfo> for wire_cst_lnurl_pay_info {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::LnurlPayInfo {
            breez_sdk_spark::models::LnurlPayInfo {
                ln_address: self.ln_address.cst_decode(),
                comment: self.comment.cst_decode(),
                domain: self.domain.cst_decode(),
                metadata: self.metadata.cst_decode(),
                processed_success_action: self.processed_success_action.cst_decode(),
                raw_success_action: self.raw_success_action.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::LnurlPayRequest> for wire_cst_lnurl_pay_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::LnurlPayRequest {
            breez_sdk_spark::models::LnurlPayRequest {
                prepare_response: self.prepare_response.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::lnurl::pay::LnurlPayRequestDetails>
        for wire_cst_lnurl_pay_request_details
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::lnurl::pay::LnurlPayRequestDetails {
            breez_sdk_common::lnurl::pay::LnurlPayRequestDetails {
                callback: self.callback.cst_decode(),
                min_sendable: self.min_sendable.cst_decode(),
                max_sendable: self.max_sendable.cst_decode(),
                metadata_str: self.metadata_str.cst_decode(),
                comment_allowed: self.comment_allowed.cst_decode(),
                domain: self.domain.cst_decode(),
                url: self.url.cst_decode(),
                address: self.address.cst_decode(),
                allows_nostr: self.allows_nostr.cst_decode(),
                nostr_pubkey: self.nostr_pubkey.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::LnurlPayResponse> for wire_cst_lnurl_pay_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::LnurlPayResponse {
            breez_sdk_spark::models::LnurlPayResponse {
                payment: self.payment.cst_decode(),
                success_action: self.success_action.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::LogEntry> for wire_cst_log_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::LogEntry {
            breez_sdk_spark::models::LogEntry {
                line: self.line.cst_decode(),
                level: self.level.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::frb_generated::LoggerImplementor> for wire_cst_logger_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::frb_generated::LoggerImplementor {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.Variant0 };
                    crate::frb_generated::LoggerImplementor::Variant0(ans.field0.cst_decode())
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::Payment> for wire_cst_payment {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::Payment {
            breez_sdk_spark::models::Payment {
                id: self.id.cst_decode(),
                payment_type: self.payment_type.cst_decode(),
                status: self.status.cst_decode(),
                amount: self.amount.cst_decode(),
                fees: self.fees.cst_decode(),
                timestamp: self.timestamp.cst_decode(),
                method: self.method.cst_decode(),
                details: self.details.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::persist::PaymentMetadata> for wire_cst_payment_metadata {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::persist::PaymentMetadata {
            breez_sdk_spark::persist::PaymentMetadata {
                lnurl_pay_info: self.lnurl_pay_info.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_common::input::PaymentRequestSource> for wire_cst_payment_request_source {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_common::input::PaymentRequestSource {
            breez_sdk_common::input::PaymentRequestSource {
                bip_21_uri: self.bip_21_uri.cst_decode(),
                bip_353_address: self.bip_353_address.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::PrepareLnurlPayRequest>
        for wire_cst_prepare_lnurl_pay_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::PrepareLnurlPayRequest {
            breez_sdk_spark::models::PrepareLnurlPayRequest {
                amount_sats: self.amount_sats.cst_decode(),
                pay_request: self.pay_request.cst_decode(),
                comment: self.comment.cst_decode(),
                validate_success_action_url: self.validate_success_action_url.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::PrepareLnurlPayResponse>
        for wire_cst_prepare_lnurl_pay_response
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::PrepareLnurlPayResponse {
            breez_sdk_spark::models::PrepareLnurlPayResponse {
                amount_sats: self.amount_sats.cst_decode(),
                comment: self.comment.cst_decode(),
                pay_request: self.pay_request.cst_decode(),
                fee_sats: self.fee_sats.cst_decode(),
                invoice_details: self.invoice_details.cst_decode(),
                success_action: self.success_action.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::PrepareSendPaymentRequest>
        for wire_cst_prepare_send_payment_request
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::PrepareSendPaymentRequest {
            breez_sdk_spark::models::PrepareSendPaymentRequest {
                payment_request: self.payment_request.cst_decode(),
                amount_sats: self.amount_sats.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::ReceivePaymentResponse>
        for wire_cst_receive_payment_response
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::ReceivePaymentResponse {
            breez_sdk_spark::models::ReceivePaymentResponse {
                payment_request: self.payment_request.cst_decode(),
                fee_sats: self.fee_sats.cst_decode(),
            }
        }
    }
    impl CstDecode<(String, String)> for wire_cst_record_string_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (String, String) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<breez_sdk_spark::models::RefundDepositResponse>
        for wire_cst_refund_deposit_response
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::RefundDepositResponse {
            breez_sdk_spark::models::RefundDepositResponse {
                tx_id: self.tx_id.cst_decode(),
                tx_hex: self.tx_hex.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::frb_generated::RestClientImplementor> for wire_cst_rest_client_implementor {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::frb_generated::RestClientImplementor {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.Variant0 };
                    crate::frb_generated::RestClientImplementor::Variant0(ans.field0.cst_decode())
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::SendOnchainSpeedFeeQuote>
        for wire_cst_send_onchain_speed_fee_quote
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::SendOnchainSpeedFeeQuote {
            breez_sdk_spark::models::SendOnchainSpeedFeeQuote {
                user_fee_sat: self.user_fee_sat.cst_decode(),
                l1_broadcast_fee_sat: self.l1_broadcast_fee_sat.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::SendPaymentResponse> for wire_cst_send_payment_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::SendPaymentResponse {
            breez_sdk_spark::models::SendPaymentResponse {
                payment: self.payment.cst_decode(),
            }
        }
    }
    impl CstDecode<breez_sdk_spark::models::SyncWalletRequest> for wire_cst_sync_wallet_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::SyncWalletRequest {
            breez_sdk_spark::models::SyncWalletRequest {}
        }
    }
    impl CstDecode<breez_sdk_spark::models::SyncWalletResponse> for wire_cst_sync_wallet_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> breez_sdk_spark::models::SyncWalletResponse {
            breez_sdk_spark::models::SyncWalletResponse {}
        }
    }
    impl NewWithNullPtr for wire_cst_binding_event_listener {
        fn new_with_null_ptr() -> Self {
            Self {
                listener: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_binding_event_listener {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_binding_logger {
        fn new_with_null_ptr() -> Self {
            Self {
                logger: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_binding_logger {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_bip_21_details {
        fn new_with_null_ptr() -> Self {
            Self {
                amount_sat: core::ptr::null_mut(),
                asset_id: core::ptr::null_mut(),
                uri: core::ptr::null_mut(),
                extras: core::ptr::null_mut(),
                label: core::ptr::null_mut(),
                message: core::ptr::null_mut(),
                payment_methods: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_bip_21_details {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_bip_21_extra {
        fn new_with_null_ptr() -> Self {
            Self {
                key: core::ptr::null_mut(),
                value: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_bip_21_extra {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_bolt_11_invoice {
        fn new_with_null_ptr() -> Self {
            Self {
                bolt11: core::ptr::null_mut(),
                source: Default::default(),
            }
        }
    }
    impl Default for wire_cst_bolt_11_invoice {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_bolt_11_invoice_details {
        fn new_with_null_ptr() -> Self {
            Self {
                amount_msat: core::ptr::null_mut(),
                description: core::ptr::null_mut(),
                description_hash: core::ptr::null_mut(),
                expiry: Default::default(),
                invoice: Default::default(),
                min_final_cltv_expiry_delta: Default::default(),
                network: Default::default(),
                payee_pubkey: core::ptr::null_mut(),
                payment_hash: core::ptr::null_mut(),
                payment_secret: core::ptr::null_mut(),
                routing_hints: core::ptr::null_mut(),
                timestamp: Default::default(),
            }
        }
    }
    impl Default for wire_cst_bolt_11_invoice_details {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_bolt_11_route_hint {
        fn new_with_null_ptr() -> Self {
            Self {
                hops: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_bolt_11_route_hint {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_bolt_11_route_hint_hop {
        fn new_with_null_ptr() -> Self {
            Self {
                src_node_id: core::ptr::null_mut(),
                short_channel_id: core::ptr::null_mut(),
                fees_base_msat: Default::default(),
                fees_proportional_millionths: Default::default(),
                cltv_expiry_delta: Default::default(),
                htlc_minimum_msat: core::ptr::null_mut(),
                htlc_maximum_msat: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_bolt_11_route_hint_hop {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_claim_deposit_request {
        fn new_with_null_ptr() -> Self {
            Self {
                txid: core::ptr::null_mut(),
                vout: Default::default(),
                max_fee: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_claim_deposit_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_claim_deposit_response {
        fn new_with_null_ptr() -> Self {
            Self {
                payment: Default::default(),
            }
        }
    }
    impl Default for wire_cst_claim_deposit_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_config {
        fn new_with_null_ptr() -> Self {
            Self {
                api_key: core::ptr::null_mut(),
                network: Default::default(),
                sync_interval_secs: Default::default(),
                max_deposit_claim_fee: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_config {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_connect_request {
        fn new_with_null_ptr() -> Self {
            Self {
                config: Default::default(),
                mnemonic: core::ptr::null_mut(),
                storage_dir: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_connect_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_deposit_info {
        fn new_with_null_ptr() -> Self {
            Self {
                txid: core::ptr::null_mut(),
                vout: Default::default(),
                amount_sats: Default::default(),
                refund_tx: core::ptr::null_mut(),
                refund_tx_id: core::ptr::null_mut(),
                claim_error: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_deposit_info {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_event_listener_implementor {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: EventListenerImplementorKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_event_listener_implementor {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_get_info_request {
        fn new_with_null_ptr() -> Self {
            Self {}
        }
    }
    impl Default for wire_cst_get_info_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_get_info_response {
        fn new_with_null_ptr() -> Self {
            Self {
                balance_sats: Default::default(),
            }
        }
    }
    impl Default for wire_cst_get_info_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_get_payment_request {
        fn new_with_null_ptr() -> Self {
            Self {
                payment_id: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_get_payment_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_get_payment_response {
        fn new_with_null_ptr() -> Self {
            Self {
                payment: Default::default(),
            }
        }
    }
    impl Default for wire_cst_get_payment_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_list_payments_request {
        fn new_with_null_ptr() -> Self {
            Self {
                offset: core::ptr::null_mut(),
                limit: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_list_payments_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_list_payments_response {
        fn new_with_null_ptr() -> Self {
            Self {
                payments: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_list_payments_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_list_unclaimed_deposits_request {
        fn new_with_null_ptr() -> Self {
            Self {}
        }
    }
    impl Default for wire_cst_list_unclaimed_deposits_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_list_unclaimed_deposits_response {
        fn new_with_null_ptr() -> Self {
            Self {
                deposits: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_list_unclaimed_deposits_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_lnurl_pay_info {
        fn new_with_null_ptr() -> Self {
            Self {
                ln_address: core::ptr::null_mut(),
                comment: core::ptr::null_mut(),
                domain: core::ptr::null_mut(),
                metadata: core::ptr::null_mut(),
                processed_success_action: core::ptr::null_mut(),
                raw_success_action: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_lnurl_pay_info {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_lnurl_pay_request {
        fn new_with_null_ptr() -> Self {
            Self {
                prepare_response: Default::default(),
            }
        }
    }
    impl Default for wire_cst_lnurl_pay_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_lnurl_pay_request_details {
        fn new_with_null_ptr() -> Self {
            Self {
                callback: core::ptr::null_mut(),
                min_sendable: Default::default(),
                max_sendable: Default::default(),
                metadata_str: core::ptr::null_mut(),
                comment_allowed: Default::default(),
                domain: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
                address: core::ptr::null_mut(),
                allows_nostr: Default::default(),
                nostr_pubkey: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_lnurl_pay_request_details {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_lnurl_pay_response {
        fn new_with_null_ptr() -> Self {
            Self {
                payment: Default::default(),
                success_action: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_lnurl_pay_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_log_entry {
        fn new_with_null_ptr() -> Self {
            Self {
                line: core::ptr::null_mut(),
                level: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_log_entry {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_logger_implementor {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: LoggerImplementorKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_logger_implementor {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_payment {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                payment_type: Default::default(),
                status: Default::default(),
                amount: Default::default(),
                fees: Default::default(),
                timestamp: Default::default(),
                method: Default::default(),
                details: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_payment {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_payment_metadata {
        fn new_with_null_ptr() -> Self {
            Self {
                lnurl_pay_info: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_payment_metadata {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_payment_request_source {
        fn new_with_null_ptr() -> Self {
            Self {
                bip_21_uri: core::ptr::null_mut(),
                bip_353_address: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_payment_request_source {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_prepare_lnurl_pay_request {
        fn new_with_null_ptr() -> Self {
            Self {
                amount_sats: Default::default(),
                pay_request: Default::default(),
                comment: core::ptr::null_mut(),
                validate_success_action_url: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_prepare_lnurl_pay_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_prepare_lnurl_pay_response {
        fn new_with_null_ptr() -> Self {
            Self {
                amount_sats: Default::default(),
                comment: core::ptr::null_mut(),
                pay_request: Default::default(),
                fee_sats: Default::default(),
                invoice_details: Default::default(),
                success_action: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_prepare_lnurl_pay_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_prepare_send_payment_request {
        fn new_with_null_ptr() -> Self {
            Self {
                payment_request: core::ptr::null_mut(),
                amount_sats: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_prepare_send_payment_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_receive_payment_response {
        fn new_with_null_ptr() -> Self {
            Self {
                payment_request: core::ptr::null_mut(),
                fee_sats: Default::default(),
            }
        }
    }
    impl Default for wire_cst_receive_payment_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_string_string {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_string_string {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_refund_deposit_response {
        fn new_with_null_ptr() -> Self {
            Self {
                tx_id: core::ptr::null_mut(),
                tx_hex: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_refund_deposit_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_rest_client_implementor {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: RestClientImplementorKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_rest_client_implementor {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_send_onchain_speed_fee_quote {
        fn new_with_null_ptr() -> Self {
            Self {
                user_fee_sat: Default::default(),
                l1_broadcast_fee_sat: Default::default(),
            }
        }
    }
    impl Default for wire_cst_send_onchain_speed_fee_quote {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_send_payment_response {
        fn new_with_null_ptr() -> Self {
            Self {
                payment: Default::default(),
            }
        }
    }
    impl Default for wire_cst_send_payment_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_sync_wallet_request {
        fn new_with_null_ptr() -> Self {
            Self {}
        }
    }
    impl Default for wire_cst_sync_wallet_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_sync_wallet_response {
        fn new_with_null_ptr() -> Self {
            Self {}
        }
    }
    impl Default for wire_cst_sync_wallet_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__chain__rest_client__BasicAuth_new(
        port_: i64,
        username: *mut wire_cst_list_prim_u_8_strict,
        password: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__chain__rest_client__BasicAuth_new_impl(port_, username, password)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_claim_deposit(
        port_: i64,
        that: usize,
        request: *mut wire_cst_claim_deposit_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_claim_deposit_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_disconnect(
        port_: i64,
        that: usize,
    ) {
        wire__breez_sdk_spark__BreezSdk_disconnect_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_frb_override_add_event_listener(
        port_: i64,
        that: usize,
        listener: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__BreezSdk_frb_override_add_event_listener_impl(port_, that, listener)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_get_info(
        port_: i64,
        that: usize,
        request: *mut wire_cst_get_info_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_get_info_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_get_payment(
        port_: i64,
        that: usize,
        request: *mut wire_cst_get_payment_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_get_payment_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_list_payments(
        port_: i64,
        that: usize,
        request: *mut wire_cst_list_payments_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_list_payments_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_list_unclaimed_deposits(
        port_: i64,
        that: usize,
        request: *mut wire_cst_list_unclaimed_deposits_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_list_unclaimed_deposits_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_lnurl_pay(
        port_: i64,
        that: usize,
        request: *mut wire_cst_lnurl_pay_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_lnurl_pay_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_prepare_lnurl_pay(
        port_: i64,
        that: usize,
        request: *mut wire_cst_prepare_lnurl_pay_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_prepare_lnurl_pay_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_prepare_send_payment(
        port_: i64,
        that: usize,
        request: *mut wire_cst_prepare_send_payment_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_prepare_send_payment_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_receive_payment(
        port_: i64,
        that: usize,
        request: usize,
    ) {
        wire__breez_sdk_spark__BreezSdk_receive_payment_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_refund_deposit(
        port_: i64,
        that: usize,
        request: usize,
    ) {
        wire__breez_sdk_spark__BreezSdk_refund_deposit_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_remove_event_listener(
        port_: i64,
        that: usize,
        id: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__BreezSdk_remove_event_listener_impl(port_, that, id)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_send_payment(
        port_: i64,
        that: usize,
        request: usize,
    ) {
        wire__breez_sdk_spark__BreezSdk_send_payment_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__BreezSdk_sync_wallet(
        port_: i64,
        that: usize,
        request: *mut wire_cst_sync_wallet_request,
    ) {
        wire__breez_sdk_spark__BreezSdk_sync_wallet_impl(port_, that, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__breez_server__BreezServer_fetch_fiat_currencies(
        port_: i64,
        that: usize,
    ) {
        wire__breez_sdk_common__breez_server__BreezServer_fetch_fiat_currencies_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__breez_server__BreezServer_fetch_fiat_rates(
        port_: i64,
        that: usize,
    ) {
        wire__breez_sdk_common__breez_server__BreezServer_fetch_fiat_rates_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__EventEmitter_add_listener(
        port_: i64,
        that: usize,
        listener: *mut wire_cst_event_listener_implementor,
    ) {
        wire__breez_sdk_spark__EventEmitter_add_listener_impl(port_, that, listener)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__EventEmitter_default(
        port_: i64,
    ) {
        wire__breez_sdk_spark__EventEmitter_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__EventEmitter_emit(
        port_: i64,
        that: usize,
        event: usize,
    ) {
        wire__breez_sdk_spark__EventEmitter_emit_impl(port_, that, event)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__EventEmitter_new(port_: i64) {
        wire__breez_sdk_spark__EventEmitter_new_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__EventEmitter_remove_listener(
        port_: i64,
        that: usize,
        id: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__EventEmitter_remove_listener_impl(port_, that, id)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__Fee_to_sats(
        port_: i64,
        that: usize,
        vbytes: u64,
    ) {
        wire__breez_sdk_spark__models__Fee_to_sats_impl(port_, that, vbytes)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_get_amount_sats(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_get_amount_sats_impl(
            that,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_get_payment_method(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_get_payment_method_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_set_amount_sats(
        that: usize,
        amount_sats: u64,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_set_amount_sats_impl(
            that,
            amount_sats,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_set_payment_method(
        that: usize,
        payment_method: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__PrepareSendPaymentResponse_auto_accessor_set_payment_method_impl(that, payment_method)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__ReceivePaymentRequest_auto_accessor_get_payment_method(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__ReceivePaymentRequest_auto_accessor_get_payment_method_impl(
            that,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__ReceivePaymentRequest_auto_accessor_set_payment_method(
        that: usize,
        payment_method: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__ReceivePaymentRequest_auto_accessor_set_payment_method_impl(
            that,
            payment_method,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_destination_address(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_destination_address_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_fee(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_fee_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_txid(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_txid_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_vout(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_get_vout_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_destination_address(
        that: usize,
        destination_address: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_destination_address_impl(that, destination_address)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_fee(
        that: usize,
        fee: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_fee_impl(that, fee)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_txid(
        that: usize,
        txid: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_txid_impl(that, txid)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_vout(
        that: usize,
        vout: u32,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__RefundDepositRequest_auto_accessor_set_vout_impl(that, vout)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_get(
        port_: i64,
        that: usize,
        url: *mut wire_cst_list_prim_u_8_strict,
        headers: *mut wire_cst_list_record_string_string,
    ) {
        wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_get_impl(
            port_, that, url, headers,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_new(
        port_: i64,
    ) {
        wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_new_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_post(
        port_: i64,
        that: usize,
        url: *mut wire_cst_list_prim_u_8_strict,
        headers: *mut wire_cst_list_record_string_string,
        body: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_common__rest__rest_client__ReqwestRestClient_post_impl(
            port_, that, url, headers, body,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__chain__rest_client__RestClientChainService_broadcast_transaction(
        port_: i64,
        that: usize,
        tx: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__chain__rest_client__RestClientChainService_broadcast_transaction_impl(
            port_, that, tx,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__chain__rest_client__RestClientChainService_get_address_utxos(
        port_: i64,
        that: usize,
        address: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__chain__rest_client__RestClientChainService_get_address_utxos_impl(
            port_, that, address,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__chain__rest_client__RestClientChainService_get_transaction_hex(
        port_: i64,
        that: usize,
        txid: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__chain__rest_client__RestClientChainService_get_transaction_hex_impl(
            port_, that, txid,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__chain__rest_client__RestClientChainService_new(
        port_: i64,
        base_url: *mut wire_cst_list_prim_u_8_strict,
        network: i32,
        max_retries: usize,
        rest_client: *mut wire_cst_rest_client_implementor,
        basic_auth: *mut usize,
    ) {
        wire__breez_sdk_spark__chain__rest_client__RestClientChainService_new_impl(
            port_,
            base_url,
            network,
            max_retries,
            rest_client,
            basic_auth,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SdkBuilder_build(
        port_: i64,
        that: usize,
    ) {
        wire__breez_sdk_spark__SdkBuilder_build_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SdkBuilder_new(
        port_: i64,
        config: *mut wire_cst_config,
        mnemonic: *mut wire_cst_list_prim_u_8_strict,
        storage: usize,
    ) {
        wire__breez_sdk_spark__SdkBuilder_new_impl(port_, config, mnemonic, storage)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_get_options(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_get_options_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_get_prepare_response(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_get_prepare_response_impl(
            that,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_set_options(
        that: usize,
        options: *mut usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_set_options_impl(
            that, options,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_set_prepare_response(
        that: usize,
        prepare_response: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__breez_sdk_spark__models__SendPaymentRequest_auto_accessor_set_prepare_response_impl(
            that,
            prepare_response,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_add_deposit(
        port_: i64,
        that: usize,
        txid: *mut wire_cst_list_prim_u_8_strict,
        vout: u32,
        amount_sats: u64,
    ) {
        wire__breez_sdk_spark__SqliteStorage_add_deposit_impl(port_, that, txid, vout, amount_sats)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_delete_deposit(
        port_: i64,
        that: usize,
        txid: *mut wire_cst_list_prim_u_8_strict,
        vout: u32,
    ) {
        wire__breez_sdk_spark__SqliteStorage_delete_deposit_impl(port_, that, txid, vout)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_get_cached_item(
        port_: i64,
        that: usize,
        key: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__SqliteStorage_get_cached_item_impl(port_, that, key)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_get_payment_by_id(
        port_: i64,
        that: usize,
        id: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__SqliteStorage_get_payment_by_id_impl(port_, that, id)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_insert_payment(
        port_: i64,
        that: usize,
        payment: *mut wire_cst_payment,
    ) {
        wire__breez_sdk_spark__SqliteStorage_insert_payment_impl(port_, that, payment)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_list_deposits(
        port_: i64,
        that: usize,
    ) {
        wire__breez_sdk_spark__SqliteStorage_list_deposits_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_list_payments(
        port_: i64,
        that: usize,
        offset: *mut u32,
        limit: *mut u32,
    ) {
        wire__breez_sdk_spark__SqliteStorage_list_payments_impl(port_, that, offset, limit)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_new(
        port_: i64,
        path: usize,
    ) {
        wire__breez_sdk_spark__SqliteStorage_new_impl(port_, path)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_set_cached_item(
        port_: i64,
        that: usize,
        key: *mut wire_cst_list_prim_u_8_strict,
        value: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__SqliteStorage_set_cached_item_impl(port_, that, key, value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_set_payment_metadata(
        port_: i64,
        that: usize,
        payment_id: *mut wire_cst_list_prim_u_8_strict,
        metadata: *mut wire_cst_payment_metadata,
    ) {
        wire__breez_sdk_spark__SqliteStorage_set_payment_metadata_impl(
            port_, that, payment_id, metadata,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__SqliteStorage_update_deposit(
        port_: i64,
        that: usize,
        txid: *mut wire_cst_list_prim_u_8_strict,
        vout: u32,
        payload: usize,
    ) {
        wire__breez_sdk_spark__SqliteStorage_update_deposit_impl(port_, that, txid, vout, payload)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__crate__binding_event_listener_on_event(
        port_: i64,
        that: *mut wire_cst_binding_event_listener,
        e: usize,
    ) {
        wire__crate__binding_event_listener_on_event_impl(port_, that, e)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__crate__binding_logger_log(
        port_: i64,
        that: *mut wire_cst_binding_logger,
        l: *mut wire_cst_log_entry,
    ) {
        wire__crate__binding_logger_log_impl(port_, that, l)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__input__bip_21_details_default(
        port_: i64,
    ) {
        wire__breez_sdk_common__input__bip_21_details_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__input__bip_21_extra_default(
        port_: i64,
    ) {
        wire__breez_sdk_common__input__bip_21_extra_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__input__bolt_11_route_hint_default(
        port_: i64,
    ) {
        wire__breez_sdk_common__input__bolt_11_route_hint_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__input__bolt_11_route_hint_hop_default(
        port_: i64,
    ) {
        wire__breez_sdk_common__input__bolt_11_route_hint_hop_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__connect(
        port_: i64,
        request: *mut wire_cst_connect_request,
    ) {
        wire__breez_sdk_spark__connect_impl(port_, request)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__default_config(
        port_: i64,
        network: i32,
    ) {
        wire__breez_sdk_spark__default_config_impl(port_, network)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__default_storage(
        port_: i64,
        data_dir: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__default_storage_impl(port_, data_dir)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__init_logging(
        port_: i64,
        log_dir: *mut wire_cst_list_prim_u_8_strict,
        app_logger: *mut wire_cst_logger_implementor,
        log_filter: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__init_logging_impl(port_, log_dir, app_logger, log_filter)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__lnurl_pay_info_default(
        port_: i64,
    ) {
        wire__breez_sdk_spark__models__lnurl_pay_info_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__input__parse(
        port_: i64,
        input: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_common__input__parse_impl(port_, input)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__parse(
        port_: i64,
        input: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_spark__parse_impl(port_, input)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__input__parse_invoice(
        port_: i64,
        input: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__breez_sdk_common__input__parse_invoice_impl(port_, input)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_common__input__payment_request_source_default(
        port_: i64,
    ) {
        wire__breez_sdk_common__input__payment_request_source_default_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_wire__breez_sdk_spark__models__send_onchain_speed_fee_quote_total_fee_sat(
        port_: i64,
        that: *mut wire_cst_send_onchain_speed_fee_quote,
    ) {
        wire__breez_sdk_spark__models__send_onchain_speed_fee_quote_total_fee_sat_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < dyn Storage >>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < dyn Storage >>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBasicAuth(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBasicAuth(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBindingEventListener(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< BindingEventListener>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBindingEventListener(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< BindingEventListener>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBindingLogger(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< BindingLogger>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBindingLogger(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< BindingLogger>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezServer(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezServer(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezServer>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDepositClaimError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDepositClaimError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventEmitter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEventEmitter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFee(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFee(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fee>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPath(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Path>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPath(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Path>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPaymentDetails(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPaymentDetails(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PaymentDetails>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultChainServiceErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultChainServiceErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<Future<Output = Result<(), ChainServiceError>> + Send + 'async_trait>,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultOptionStringStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Option<String>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultOptionStringStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Option<String>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultPaymentStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultPaymentStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<Future<Output = Result<Payment, StorageError>> + Send + 'async_trait>,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultRestResponseServiceConnectivityErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<RestResponse, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultRestResponseServiceConnectivityErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<RestResponse, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<Box<Future<Output = Result<(), StorageError>> + Send + 'async_trait>>,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultStringChainServiceErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<String, ChainServiceError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultStringChainServiceErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<String, ChainServiceError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecDepositInfoStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<DepositInfo>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecDepositInfoStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<DepositInfo>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecFiatCurrencyServiceConnectivityErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecFiatCurrencyServiceConnectivityErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<FiatCurrency>, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecPaymentStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Payment>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecPaymentStorageErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Payment>, StorageError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecRateServiceConnectivityErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecRateServiceConnectivityErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Rate>, ServiceConnectivityError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecUtxoChainServiceErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Utxo>, ChainServiceError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecUtxoChainServiceErrorSendasync_trait(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                    ::Pin<
                        Box<
                            Future<Output = Result<Vec<Utxo>, ChainServiceError>>
                                + Send
                                + 'async_trait,
                        >,
                    >,
                >,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareSendPaymentResponse(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPrepareSendPaymentResponse(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PrepareSendPaymentResponse>,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceivePaymentMethod(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceivePaymentMethod(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentMethod>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceivePaymentRequest(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceivePaymentRequest(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceivePaymentRequest>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRefundDepositRequest(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRefundDepositRequest(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RefundDepositRequest>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReqwestRestClient(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReqwestRestClient(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReqwestRestClient>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRestClientChainService(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRestClientChainService(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkEvent(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkEvent(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendPaymentMethod(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendPaymentMethod(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentMethod>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendPaymentOptions(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendPaymentOptions(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentOptions>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendPaymentRequest(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendPaymentRequest(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SendPaymentRequest>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerServiceConnectivityError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerServiceConnectivityError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ServiceConnectivityError>,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSqliteStorage(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSqliteStorage(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStorageError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStorageError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSuccessAction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSuccessAction(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessAction>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSuccessActionProcessed(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSuccessActionProcessed(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SuccessActionProcessed>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateDepositPayload(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateDepositPayload(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_DynTrait_EventListener(
    ) -> *mut wire_cst_event_listener_implementor {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_event_listener_implementor::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_DynTrait_Logger(
    ) -> *mut wire_cst_logger_implementor {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_logger_implementor::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_DynTrait_RestClient(
    ) -> *mut wire_cst_rest_client_implementor {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_rest_client_implementor::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBasicAuth(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDepositClaimError(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFee(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPaymentDetails(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSendPaymentOptions(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSuccessAction(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSuccessActionProcessed(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_binding_event_listener(
    ) -> *mut wire_cst_binding_event_listener {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_binding_event_listener::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_binding_logger(
    ) -> *mut wire_cst_binding_logger {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_binding_logger::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_bolt_11_invoice_details(
    ) -> *mut wire_cst_bolt_11_invoice_details {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_bolt_11_invoice_details::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_claim_deposit_request(
    ) -> *mut wire_cst_claim_deposit_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_claim_deposit_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_config() -> *mut wire_cst_config {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_config::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_connect_request(
    ) -> *mut wire_cst_connect_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_connect_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_event_listener_implementor(
    ) -> *mut wire_cst_event_listener_implementor {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_event_listener_implementor::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_get_info_request(
    ) -> *mut wire_cst_get_info_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_get_info_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_get_payment_request(
    ) -> *mut wire_cst_get_payment_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_get_payment_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_list_payments_request(
    ) -> *mut wire_cst_list_payments_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_list_payments_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_list_unclaimed_deposits_request(
    ) -> *mut wire_cst_list_unclaimed_deposits_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_list_unclaimed_deposits_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_lnurl_pay_info(
    ) -> *mut wire_cst_lnurl_pay_info {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_lnurl_pay_info::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_lnurl_pay_request(
    ) -> *mut wire_cst_lnurl_pay_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_lnurl_pay_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_log_entry(
    ) -> *mut wire_cst_log_entry {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_log_entry::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_logger_implementor(
    ) -> *mut wire_cst_logger_implementor {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_logger_implementor::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_payment() -> *mut wire_cst_payment
    {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_payment::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_payment_metadata(
    ) -> *mut wire_cst_payment_metadata {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_payment_metadata::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_prepare_lnurl_pay_request(
    ) -> *mut wire_cst_prepare_lnurl_pay_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_prepare_lnurl_pay_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_prepare_send_payment_request(
    ) -> *mut wire_cst_prepare_send_payment_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_prepare_send_payment_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_rest_client_implementor(
    ) -> *mut wire_cst_rest_client_implementor {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_rest_client_implementor::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_send_onchain_speed_fee_quote(
    ) -> *mut wire_cst_send_onchain_speed_fee_quote {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_send_onchain_speed_fee_quote::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_sync_wallet_request(
    ) -> *mut wire_cst_sync_wallet_request {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_sync_wallet_request::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType{
        let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_bip_21_extra(
        len: i32,
    ) -> *mut wire_cst_list_bip_21_extra {
        let wrap = wire_cst_list_bip_21_extra {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_bip_21_extra>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_bolt_11_route_hint(
        len: i32,
    ) -> *mut wire_cst_list_bolt_11_route_hint {
        let wrap = wire_cst_list_bolt_11_route_hint {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_bolt_11_route_hint>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_bolt_11_route_hint_hop(
        len: i32,
    ) -> *mut wire_cst_list_bolt_11_route_hint_hop {
        let wrap = wire_cst_list_bolt_11_route_hint_hop {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_bolt_11_route_hint_hop>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_deposit_info(
        len: i32,
    ) -> *mut wire_cst_list_deposit_info {
        let wrap = wire_cst_list_deposit_info {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_deposit_info>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_payment(
        len: i32,
    ) -> *mut wire_cst_list_payment {
        let wrap = wire_cst_list_payment {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_payment>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_breez_sdk_spark_cst_new_list_record_string_string(
        len: i32,
    ) -> *mut wire_cst_list_record_string_string {
        let wrap = wire_cst_list_record_string_string {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_record_string_string>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_binding_event_listener {
        listener: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_binding_logger {
        logger: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_bip_21_details { amount_sat: *mut u64,
asset_id: *mut wire_cst_list_prim_u_8_strict,
uri: *mut wire_cst_list_prim_u_8_strict,
extras: *mut wire_cst_list_bip_21_extra,
label: *mut wire_cst_list_prim_u_8_strict,
message: *mut wire_cst_list_prim_u_8_strict,
payment_methods: *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_bip_21_extra {
        key: *mut wire_cst_list_prim_u_8_strict,
        value: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_bolt_11_invoice {
        bolt11: *mut wire_cst_list_prim_u_8_strict,
        source: wire_cst_payment_request_source,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_bolt_11_invoice_details {
        amount_msat: *mut u64,
        description: *mut wire_cst_list_prim_u_8_strict,
        description_hash: *mut wire_cst_list_prim_u_8_strict,
        expiry: u64,
        invoice: wire_cst_bolt_11_invoice,
        min_final_cltv_expiry_delta: u64,
        network: i32,
        payee_pubkey: *mut wire_cst_list_prim_u_8_strict,
        payment_hash: *mut wire_cst_list_prim_u_8_strict,
        payment_secret: *mut wire_cst_list_prim_u_8_strict,
        routing_hints: *mut wire_cst_list_bolt_11_route_hint,
        timestamp: u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_bolt_11_route_hint {
        hops: *mut wire_cst_list_bolt_11_route_hint_hop,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_bolt_11_route_hint_hop {
        src_node_id: *mut wire_cst_list_prim_u_8_strict,
        short_channel_id: *mut wire_cst_list_prim_u_8_strict,
        fees_base_msat: u32,
        fees_proportional_millionths: u32,
        cltv_expiry_delta: u16,
        htlc_minimum_msat: *mut u64,
        htlc_maximum_msat: *mut u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_claim_deposit_request {
        txid: *mut wire_cst_list_prim_u_8_strict,
        vout: u32,
        max_fee: *mut usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_claim_deposit_response {
        payment: wire_cst_payment,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_config {
        api_key: *mut wire_cst_list_prim_u_8_strict,
        network: i32,
        sync_interval_secs: u32,
        max_deposit_claim_fee: *mut usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_connect_request {
        config: wire_cst_config,
        mnemonic: *mut wire_cst_list_prim_u_8_strict,
        storage_dir: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_deposit_info {
        txid: *mut wire_cst_list_prim_u_8_strict,
        vout: u32,
        amount_sats: u64,
        refund_tx: *mut wire_cst_list_prim_u_8_strict,
        refund_tx_id: *mut wire_cst_list_prim_u_8_strict,
        claim_error: *mut usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_event_listener_implementor {
        tag: i32,
        kind: EventListenerImplementorKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union EventListenerImplementorKind {
        Variant0: wire_cst_EventListenerImplementor_Variant0,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_EventListenerImplementor_Variant0 {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_get_info_request {}
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_get_info_response {
        balance_sats: u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_get_payment_request {
        payment_id: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_get_payment_response {
        payment: wire_cst_payment,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputType
    {
        ptr: *mut usize,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_bip_21_extra {
        ptr: *mut wire_cst_bip_21_extra,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_bolt_11_route_hint {
        ptr: *mut wire_cst_bolt_11_route_hint,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_bolt_11_route_hint_hop {
        ptr: *mut wire_cst_bolt_11_route_hint_hop,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_deposit_info {
        ptr: *mut wire_cst_deposit_info,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_payment {
        ptr: *mut wire_cst_payment,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_payments_request {
        offset: *mut u32,
        limit: *mut u32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_payments_response {
        payments: *mut wire_cst_list_payment,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_record_string_string {
        ptr: *mut wire_cst_record_string_string,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_unclaimed_deposits_request {}
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_unclaimed_deposits_response {
        deposits: *mut wire_cst_list_deposit_info,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_lnurl_pay_info {
        ln_address: *mut wire_cst_list_prim_u_8_strict,
        comment: *mut wire_cst_list_prim_u_8_strict,
        domain: *mut wire_cst_list_prim_u_8_strict,
        metadata: *mut wire_cst_list_prim_u_8_strict,
        processed_success_action: *mut usize,
        raw_success_action: *mut usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_lnurl_pay_request {
        prepare_response: wire_cst_prepare_lnurl_pay_response,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_lnurl_pay_request_details {
        callback: *mut wire_cst_list_prim_u_8_strict,
        min_sendable: u64,
        max_sendable: u64,
        metadata_str: *mut wire_cst_list_prim_u_8_strict,
        comment_allowed: u16,
        domain: *mut wire_cst_list_prim_u_8_strict,
        url: *mut wire_cst_list_prim_u_8_strict,
        address: *mut wire_cst_list_prim_u_8_strict,
        allows_nostr: bool,
        nostr_pubkey: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_lnurl_pay_response {
        payment: wire_cst_payment,
        success_action: *mut usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_log_entry {
        line: *mut wire_cst_list_prim_u_8_strict,
        level: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_logger_implementor {
        tag: i32,
        kind: LoggerImplementorKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union LoggerImplementorKind {
        Variant0: wire_cst_LoggerImplementor_Variant0,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_LoggerImplementor_Variant0 {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_payment {
        id: *mut wire_cst_list_prim_u_8_strict,
        payment_type: i32,
        status: i32,
        amount: u64,
        fees: u64,
        timestamp: u64,
        method: i32,
        details: *mut usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_payment_metadata {
        lnurl_pay_info: *mut wire_cst_lnurl_pay_info,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_payment_request_source {
        bip_21_uri: *mut wire_cst_list_prim_u_8_strict,
        bip_353_address: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_prepare_lnurl_pay_request {
        amount_sats: u64,
        pay_request: wire_cst_lnurl_pay_request_details,
        comment: *mut wire_cst_list_prim_u_8_strict,
        validate_success_action_url: *mut bool,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_prepare_lnurl_pay_response {
        amount_sats: u64,
        comment: *mut wire_cst_list_prim_u_8_strict,
        pay_request: wire_cst_lnurl_pay_request_details,
        fee_sats: u64,
        invoice_details: wire_cst_bolt_11_invoice_details,
        success_action: *mut usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_prepare_send_payment_request {
        payment_request: *mut wire_cst_list_prim_u_8_strict,
        amount_sats: *mut u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_receive_payment_response {
        payment_request: *mut wire_cst_list_prim_u_8_strict,
        fee_sats: u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_string_string {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_refund_deposit_response {
        tx_id: *mut wire_cst_list_prim_u_8_strict,
        tx_hex: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_rest_client_implementor {
        tag: i32,
        kind: RestClientImplementorKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union RestClientImplementorKind {
        Variant0: wire_cst_RestClientImplementor_Variant0,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_RestClientImplementor_Variant0 {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_send_onchain_speed_fee_quote {
        user_fee_sat: u64,
        l1_broadcast_fee_sat: u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_send_payment_response {
        payment: wire_cst_payment,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_sync_wallet_request {}
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_sync_wallet_response {}
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
