// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../breez_sdk_common/rest/rest_client.dart';
import '../chain.dart';
import '../models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BasicAuth>>
abstract class BasicAuth implements RustOpaqueInterface {
  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<BasicAuth> newInstance({required String username, required String password}) => BreezSpark
      .instance
      .api
      .breezSdkSparkChainRestClientBasicAuthNew(username: username, password: password);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RestClientChainService>>
abstract class RestClientChainService implements RustOpaqueInterface, BitcoinChainService {
  @override
  Future<PinBoxFutureOutputResultChainServiceErrorAsyncTrait> broadcastTransaction({required String tx});

  @override
  Future<PinBoxFutureOutputResultVecUtxoChainServiceErrorAsyncTrait> getAddressUtxos({
    required String address,
  });

  @override
  Future<PinBoxFutureOutputResultStringChainServiceErrorAsyncTrait> getTransactionHex({required String txid});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<RestClientChainService> newInstance({
    required String baseUrl,
    required Network network,
    required BigInt maxRetries,
    required RestClient restClient,
    BasicAuth? basicAuth,
  }) => BreezSpark.instance.api.breezSdkSparkChainRestClientRestClientChainServiceNew(
    baseUrl: baseUrl,
    network: network,
    maxRetries: maxRetries,
    restClient: restClient,
    basicAuth: basicAuth,
  );
}
