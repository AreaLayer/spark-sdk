// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../breez_sdk_common/lnurl/pay.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'persist/sqlite.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `CachedAccountInfo`, `CachedSyncInfo`, `CachedTx`, `ObjectCacheRepository`, `StaticDepositAddress`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`, `from`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `default`, `default`, `default`, `default`

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StorageError>>
abstract class StorageError implements RustOpaqueInterface {}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateDepositPayload>>
abstract class UpdateDepositPayload implements RustOpaqueInterface {}

abstract class Storage {
  /// Add a deposit to storage
  /// # Arguments
  ///
  /// * `txid` - The transaction ID of the deposit
  /// * `vout` - The output index of the deposit
  /// * `amount_sats` - The amount of the deposit in sats
  ///
  /// # Returns
  ///
  /// Success or a `StorageError`
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> addDeposit({
    required String txid,
    required int vout,
    required BigInt amountSats,
  });

  /// Removes an unclaimed deposit from storage
  /// # Arguments
  ///
  /// * `txid` - The transaction ID of the deposit
  /// * `vout` - The output index of the deposit
  ///
  /// # Returns
  ///
  /// Success or a `StorageError`
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> deleteDeposit({
    required String txid,
    required int vout,
  });

  Future<PinBoxFutureOutputResultOptionStringStorageErrorAsyncTrait> getCachedItem({required String key});

  /// Gets a payment by its ID
  /// # Arguments
  ///
  /// * `id` - The ID of the payment to retrieve
  ///
  /// # Returns
  ///
  /// The payment if found or None if not found
  Future<PinBoxFutureOutputResultPaymentStorageErrorAsyncTrait> getPaymentById({required String id});

  /// Inserts a payment into storage
  ///
  /// # Arguments
  ///
  /// * `payment` - The payment to insert
  ///
  /// # Returns
  ///
  /// Success or a `StorageError`
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> insertPayment({required Payment payment});

  /// Lists all unclaimed deposits from storage
  /// # Returns
  ///
  /// A vector of `DepositInfo` or a `StorageError`
  Future<PinBoxFutureOutputResultVecDepositInfoStorageErrorAsyncTrait> listDeposits();

  /// Lists payments with pagination
  ///
  /// # Arguments
  ///
  /// * `offset` - Number of records to skip
  /// * `limit` - Maximum number of records to return
  ///
  /// # Returns
  ///
  /// A vector of payments or a `StorageError`
  Future<PinBoxFutureOutputResultVecPaymentStorageErrorAsyncTrait> listPayments({int? offset, int? limit});

  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> setCachedItem({
    required String key,
    required String value,
  });

  /// Inserts payment metadata into storage
  ///
  /// # Arguments
  ///
  /// * `payment_id` - The ID of the payment
  /// * `metadata` - The metadata to insert
  ///
  /// # Returns
  ///
  /// Success or a `StorageError`
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> setPaymentMetadata({
    required String paymentId,
    required PaymentMetadata metadata,
  });

  /// Updates or inserts unclaimed deposit details
  /// # Arguments
  ///
  /// * `txid` - The transaction ID of the deposit
  /// * `vout` - The output index of the deposit
  /// * `payload` - The payload for the update
  ///
  /// # Returns
  ///
  /// Success or a `StorageError`
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> updateDeposit({
    required String txid,
    required int vout,
    required UpdateDepositPayload payload,
  });
}

/// Metadata associated with a payment that cannot be extracted from the Spark operator.
class PaymentMetadata {
  final LnurlPayInfo? lnurlPayInfo;

  const PaymentMetadata({this.lnurlPayInfo});

  @override
  int get hashCode => lnurlPayInfo.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PaymentMetadata && runtimeType == other.runtimeType && lnurlPayInfo == other.lnurlPayInfo;
}
