// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'breez_sdk_common/input.dart';
import 'breez_sdk_common/lnurl/pay.dart';
import 'breez_sdk_common/network.dart';
import 'breez_sdk_spark/models.dart';
import 'breez_sdk_spark/persist.dart';
import 'breez_sdk_spark/persist/sqlite.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> initLogging({String? logDir, Logger? appLogger, String? logFilter}) => BreezSpark.instance.api
    .breezSdkSparkInitLogging(logDir: logDir, appLogger: appLogger, logFilter: logFilter);

/// Connects to the Spark network using the provided configuration and mnemonic.
///
/// # Arguments
///
/// * `request` - The connection request object
///
/// # Returns
///
/// Result containing either the initialized `BreezSdk` or an `SdkError`
Future<BreezSdk> connect({required ConnectRequest request}) =>
    BreezSpark.instance.api.breezSdkSparkConnect(request: request);

Future<ArcStorage> defaultStorage({required String dataDir}) =>
    BreezSpark.instance.api.breezSdkSparkDefaultStorage(dataDir: dataDir);

Future<Config> defaultConfig({required Network network}) =>
    BreezSpark.instance.api.breezSdkSparkDefaultConfig(network: network);

Future<InputType> parse({required String input}) => BreezSpark.instance.api.breezSdkSparkParse(input: input);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>
abstract class BreezSdk implements RustOpaqueInterface, BreezSdkExt {
  Future<ClaimDepositResponse> claimDeposit({required ClaimDepositRequest request});

  /// Stops the SDK's background tasks
  ///
  /// This method stops the background tasks started by the `start()` method.
  /// It should be called before your application terminates to ensure proper cleanup.
  ///
  /// # Returns
  ///
  /// Result containing either success or an `SdkError` if the background task couldn't be stopped
  Future<void> disconnect();

  @override
  Stream<SdkEvent> addEventListener();

  /// Returns the balance of the wallet in satoshis
  Future<GetInfoResponse> getInfo({required GetInfoRequest request});

  Future<GetPaymentResponse> getPayment({required GetPaymentRequest request});

  /// Lists payments from the storage with pagination
  ///
  /// This method provides direct access to the payment history stored in the database.
  /// It returns payments in reverse chronological order (newest first).
  ///
  /// # Arguments
  ///
  /// * `request` - Contains pagination parameters (offset and limit)
  ///
  /// # Returns
  ///
  /// * `Ok(ListPaymentsResponse)` - Contains the list of payments if successful
  /// * `Err(SdkError)` - If there was an error accessing the storage
  ///
  Future<ListPaymentsResponse> listPayments({required ListPaymentsRequest request});

  Future<ListUnclaimedDepositsResponse> listUnclaimedDeposits({
    required ListUnclaimedDepositsRequest request,
  });

  Future<LnurlPayResponse> lnurlPay({required LnurlPayRequest request});

  Future<PrepareLnurlPayResponse> prepareLnurlPay({required PrepareLnurlPayRequest request});

  Future<PrepareSendPaymentResponse> prepareSendPayment({required PrepareSendPaymentRequest request});

  Future<ReceivePaymentResponse> receivePayment({required ReceivePaymentRequest request});

  Future<RefundDepositResponse> refundDeposit({required RefundDepositRequest request});

  /// Removes a previously registered event listener
  ///
  /// # Arguments
  ///
  /// * `id` - The listener ID returned from `add_event_listener`
  ///
  /// # Returns
  ///
  /// `true` if the listener was found and removed, `false` otherwise
  Future<bool> removeEventListener({required String id});

  Future<SendPaymentResponse> sendPayment({required SendPaymentRequest request});

  /// Synchronizes the wallet with the Spark network
  Future<SyncWalletResponse> syncWallet({required SyncWalletRequest request});
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositClaimError>>
abstract class DepositClaimError implements RustOpaqueInterface {}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EventEmitter>>
abstract class EventEmitter implements RustOpaqueInterface {
  /// Add a listener to receive events
  ///
  /// # Arguments
  ///
  /// * `listener` - The listener to add
  ///
  /// # Returns
  ///
  /// A unique identifier for the listener, which can be used to remove it later
  Future<String> addListener({required EventListener listener});

  static Future<EventEmitter> default_() => BreezSpark.instance.api.breezSdkSparkEventEmitterDefault();

  /// Emit an event to all registered listeners
  Future<void> emit({required SdkEvent event});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new event emitter
  static Future<EventEmitter> newInstance() => BreezSpark.instance.api.breezSdkSparkEventEmitterNew();

  /// Remove a listener by its ID
  ///
  /// # Arguments
  ///
  /// * `id` - The ID returned from `add_listener`
  ///
  /// # Returns
  ///
  /// `true` if the listener was found and removed, `false` otherwise
  Future<bool> removeListener({required String id});
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkBuilder>>
abstract class SdkBuilder implements RustOpaqueInterface {
  /// Builds the `BreezSdk` instance with the configured components.
  Future<BreezSdk> build();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates a new `SdkBuilder` with the provided configuration.
  /// Arguments:
  /// - `config`: The configuration to be used.
  /// - `mnemonic`: The mnemonic phrase for the wallet.
  /// - `storage`: The storage backend to be used.
  static Future<SdkBuilder> newInstance({
    required Config config,
    required String mnemonic,
    required ArcStorage storage,
  }) => BreezSpark.instance.api.breezSdkSparkSdkBuilderNew(
    config: config,
    mnemonic: mnemonic,
    storage: storage,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkError>>
abstract class SdkError implements RustOpaqueInterface {}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SdkEvent>>
abstract class SdkEvent implements RustOpaqueInterface {}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqliteStorage>>
abstract class SqliteStorage implements RustOpaqueInterface, Storage {
  @override
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> addDeposit({
    required String txid,
    required int vout,
    required BigInt amountSats,
  });

  @override
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> deleteDeposit({
    required String txid,
    required int vout,
  });

  @override
  Future<PinBoxFutureOutputResultOptionStringStorageErrorAsyncTrait> getCachedItem({required String key});

  @override
  Future<PinBoxFutureOutputResultPaymentStorageErrorAsyncTrait> getPaymentById({required String id});

  @override
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> insertPayment({required Payment payment});

  @override
  Future<PinBoxFutureOutputResultVecDepositInfoStorageErrorAsyncTrait> listDeposits();

  @override
  Future<PinBoxFutureOutputResultVecPaymentStorageErrorAsyncTrait> listPayments({int? offset, int? limit});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates a new `SQLite` storage
  ///
  /// # Arguments
  ///
  /// * `path` - Path to the `SQLite` database file
  ///
  /// # Returns
  ///
  /// A new `SqliteStorage` instance or an error
  static Future<SqliteStorage> newInstance({required Path path}) =>
      BreezSpark.instance.api.breezSdkSparkSqliteStorageNew(path: path);

  @override
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> setCachedItem({
    required String key,
    required String value,
  });

  @override
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> setPaymentMetadata({
    required String paymentId,
    required PaymentMetadata metadata,
  });

  @override
  Future<PinBoxFutureOutputResultStorageErrorAsyncTrait> updateDeposit({
    required String txid,
    required int vout,
    required UpdateDepositPayload payload,
  });
}

abstract class EventListener {
  /// Called when an event occurs
  Future<void> onEvent({required SdkEvent event});
}
