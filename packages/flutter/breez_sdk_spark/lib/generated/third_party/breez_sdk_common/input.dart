// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'network.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `Amount`, `BitcoinAddressDetails`, `Bolt12InvoiceDetails`, `Bolt12InvoiceRequestDetails`, `Bolt12Invoice`, `Bolt12OfferBlindedPath`, `Bolt12OfferDetails`, `Bolt12Offer`, `LightningAddressDetails`, `LnurlWithdrawRequestDetails`, `SatsPaymentDetails`, `SilentPaymentAddressDetails`, `SparkAddressDetails`, `SparkAddressPaymentType`, `SparkAddress`, `SparkInvoiceFields`, `TokensPaymentDetails`

Future<InputType> parse({required String input}) =>
    BreezSpark.instance.api.breezSdkCommonInputParse(input: input);

Future<Bolt11InvoiceDetails?> parseInvoice({required String input}) =>
    BreezSpark.instance.api.breezSdkCommonInputParseInvoice(input: input);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputType>>
abstract class InputType implements RustOpaqueInterface {}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ParseError>>
abstract class ParseError implements RustOpaqueInterface {}

class Bip21Details {
  final BigInt? amountSat;
  final String? assetId;
  final String uri;
  final List<Bip21Extra> extras;
  final String? label;
  final String? message;
  final List<InputType> paymentMethods;

  const Bip21Details({
    this.amountSat,
    this.assetId,
    required this.uri,
    required this.extras,
    this.label,
    this.message,
    required this.paymentMethods,
  });

  static Future<Bip21Details> default_() => BreezSpark.instance.api.breezSdkCommonInputBip21DetailsDefault();

  @override
  int get hashCode =>
      amountSat.hashCode ^
      assetId.hashCode ^
      uri.hashCode ^
      extras.hashCode ^
      label.hashCode ^
      message.hashCode ^
      paymentMethods.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bip21Details &&
          runtimeType == other.runtimeType &&
          amountSat == other.amountSat &&
          assetId == other.assetId &&
          uri == other.uri &&
          extras == other.extras &&
          label == other.label &&
          message == other.message &&
          paymentMethods == other.paymentMethods;
}

class Bip21Extra {
  final String key;
  final String value;

  const Bip21Extra({required this.key, required this.value});

  static Future<Bip21Extra> default_() => BreezSpark.instance.api.breezSdkCommonInputBip21ExtraDefault();

  @override
  int get hashCode => key.hashCode ^ value.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bip21Extra && runtimeType == other.runtimeType && key == other.key && value == other.value;
}

class Bolt11Invoice {
  final String bolt11;
  final PaymentRequestSource source;

  const Bolt11Invoice({required this.bolt11, required this.source});

  @override
  int get hashCode => bolt11.hashCode ^ source.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bolt11Invoice &&
          runtimeType == other.runtimeType &&
          bolt11 == other.bolt11 &&
          source == other.source;
}

class Bolt11InvoiceDetails {
  final BigInt? amountMsat;
  final String? description;
  final String? descriptionHash;
  final BigInt expiry;
  final Bolt11Invoice invoice;
  final BigInt minFinalCltvExpiryDelta;
  final BitcoinNetwork network;
  final String payeePubkey;
  final String paymentHash;
  final String paymentSecret;
  final List<Bolt11RouteHint> routingHints;
  final BigInt timestamp;

  const Bolt11InvoiceDetails({
    this.amountMsat,
    this.description,
    this.descriptionHash,
    required this.expiry,
    required this.invoice,
    required this.minFinalCltvExpiryDelta,
    required this.network,
    required this.payeePubkey,
    required this.paymentHash,
    required this.paymentSecret,
    required this.routingHints,
    required this.timestamp,
  });

  @override
  int get hashCode =>
      amountMsat.hashCode ^
      description.hashCode ^
      descriptionHash.hashCode ^
      expiry.hashCode ^
      invoice.hashCode ^
      minFinalCltvExpiryDelta.hashCode ^
      network.hashCode ^
      payeePubkey.hashCode ^
      paymentHash.hashCode ^
      paymentSecret.hashCode ^
      routingHints.hashCode ^
      timestamp.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bolt11InvoiceDetails &&
          runtimeType == other.runtimeType &&
          amountMsat == other.amountMsat &&
          description == other.description &&
          descriptionHash == other.descriptionHash &&
          expiry == other.expiry &&
          invoice == other.invoice &&
          minFinalCltvExpiryDelta == other.minFinalCltvExpiryDelta &&
          network == other.network &&
          payeePubkey == other.payeePubkey &&
          paymentHash == other.paymentHash &&
          paymentSecret == other.paymentSecret &&
          routingHints == other.routingHints &&
          timestamp == other.timestamp;
}

class Bolt11RouteHint {
  final List<Bolt11RouteHintHop> hops;

  const Bolt11RouteHint({required this.hops});

  static Future<Bolt11RouteHint> default_() =>
      BreezSpark.instance.api.breezSdkCommonInputBolt11RouteHintDefault();

  @override
  int get hashCode => hops.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bolt11RouteHint && runtimeType == other.runtimeType && hops == other.hops;
}

class Bolt11RouteHintHop {
  /// The `node_id` of the non-target end of the route
  final String srcNodeId;

  /// The `short_channel_id` of this channel
  final String shortChannelId;

  /// The fees which must be paid to use this channel
  final int feesBaseMsat;
  final int feesProportionalMillionths;

  /// The difference in CLTV values between this node and the next node.
  final int cltvExpiryDelta;

  /// The minimum value, in msat, which must be relayed to the next hop.
  final BigInt? htlcMinimumMsat;

  /// The maximum value in msat available for routing with a single HTLC.
  final BigInt? htlcMaximumMsat;

  const Bolt11RouteHintHop({
    required this.srcNodeId,
    required this.shortChannelId,
    required this.feesBaseMsat,
    required this.feesProportionalMillionths,
    required this.cltvExpiryDelta,
    this.htlcMinimumMsat,
    this.htlcMaximumMsat,
  });

  static Future<Bolt11RouteHintHop> default_() =>
      BreezSpark.instance.api.breezSdkCommonInputBolt11RouteHintHopDefault();

  @override
  int get hashCode =>
      srcNodeId.hashCode ^
      shortChannelId.hashCode ^
      feesBaseMsat.hashCode ^
      feesProportionalMillionths.hashCode ^
      cltvExpiryDelta.hashCode ^
      htlcMinimumMsat.hashCode ^
      htlcMaximumMsat.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Bolt11RouteHintHop &&
          runtimeType == other.runtimeType &&
          srcNodeId == other.srcNodeId &&
          shortChannelId == other.shortChannelId &&
          feesBaseMsat == other.feesBaseMsat &&
          feesProportionalMillionths == other.feesProportionalMillionths &&
          cltvExpiryDelta == other.cltvExpiryDelta &&
          htlcMinimumMsat == other.htlcMinimumMsat &&
          htlcMaximumMsat == other.htlcMaximumMsat;
}

class PaymentRequestSource {
  final String? bip21Uri;
  final String? bip353Address;

  const PaymentRequestSource({this.bip21Uri, this.bip353Address});

  static Future<PaymentRequestSource> default_() =>
      BreezSpark.instance.api.breezSdkCommonInputPaymentRequestSourceDefault();

  @override
  int get hashCode => bip21Uri.hashCode ^ bip353Address.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PaymentRequestSource &&
          runtimeType == other.runtimeType &&
          bip21Uri == other.bip21Uri &&
          bip353Address == other.bip353Address;
}
